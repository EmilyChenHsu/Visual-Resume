{"displayName":"Yves Senn","id":"1938429","avatar":"","creationDate":"2012-12-30 19:38:39","website":"http:\/\/blog.senny.ch","reputation":"1403","questionCount":0,"answerCount":50,"commentCount":16,"acceptedCount":29,"nonacceptedCount":21,"activity":{"2013-01":{"commentCount":14,"answerCount":32,"nonacceptedCount":12,"acceptedCount":20},"2012-12":{"commentCount":2,"answerCount":16,"nonacceptedCount":7,"acceptedCount":9},"2013-03":{"answerCount":2,"nonacceptedCount":2}},"tags":{"ruby-on-rails":{"activity":{"2013-01":{"commentCount":9,"answerCount":23,"nonacceptedCount":8,"acceptedCount":15},"2012-12":{"commentCount":1,"answerCount":12,"nonacceptedCount":6,"acceptedCount":6},"2013-03":{"answerCount":1,"nonacceptedCount":1}},"commentCount":10,"relatedTags":{"activerecord":11,"actioncontroller":2,"ruby-on-rails-3.2":5,"thin":1,"foreman":1,"rails-api":1,"strong-parameters":1,"rake":1,"background-process":1,"resque":1,"ruby-on-rails-2":1,"ruby":5,"ruby-on-rails-3":13,"ruby-1.9.3":2,"update-attributes":1,"database-design":1,"devise":1,"cancan":1,"twitter-bootstrap":1,"simple-form":1,"sqlite3":1,"migration":1,"namespaces":1,"associations":1,"serialization":1,"redis":2,"geocoding":1,"ruby-on-rails-3.1":1,"single-table-inheritance":1,"actionmailer":2,"helpers":1,"table":1,"clone":1,"webserver":1,"xml":1,"postgresql-9.1":1,"psql":1,"view":1,"postgresql":1,"rspec":2,"asynchronous":1,"find":1,"extend":1,"tdd":1,"rspec-rails":1,"ubuntu":1,"console":1,"terminal":1,"command":1,"forms":1,"integration-testing":1},"answerCount":36,"nonacceptedCount":15,"acceptedCount":21},"activerecord":{"activity":{"2013-01":{"commentCount":4,"answerCount":6,"nonacceptedCount":5,"acceptedCount":1},"2012-12":{"answerCount":3,"acceptedCount":2,"nonacceptedCount":1}},"commentCount":4,"relatedTags":{"ruby-on-rails":11,"database-design":1,"sqlite3":1,"migration":1,"namespaces":1,"associations":1,"serialization":1,"redis":1,"dao":1,"postgresql-9.1":1,"psql":1,"postgresql":1,"ruby-on-rails-3":1,"callback":1},"answerCount":9,"acceptedCount":3,"nonacceptedCount":6},"actioncontroller":{"activity":{"2013-01":{"commentCount":1,"answerCount":1,"acceptedCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":2},"answerCount":1,"acceptedCount":1},"ruby-on-rails-3.2":{"activity":{"2012-12":{"commentCount":1,"answerCount":3,"nonacceptedCount":1,"acceptedCount":2},"2013-01":{"commentCount":1,"answerCount":2,"nonacceptedCount":2}},"commentCount":2,"relatedTags":{"ruby-on-rails":5,"thin":1,"foreman":1,"rails-api":1,"ruby":2,"ruby-on-rails-3":5,"ruby-1.9.3":2,"railstutorial.org":1},"answerCount":5,"nonacceptedCount":3,"acceptedCount":2},"thin":{"activity":{"2012-12":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3.2":1,"foreman":1,"rails-api":1}},"foreman":{"activity":{"2012-12":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3.2":1,"thin":1,"rails-api":1}},"rails-api":{"activity":{"2012-12":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3.2":1,"thin":1,"foreman":1}},"strong-parameters":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":1}},"rake":{"activity":{"2013-01":{"commentCount":1,"answerCount":1,"nonacceptedCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":1,"background-process":1,"resque":1,"ruby-on-rails-2":1,"ruby":1,"ruby-on-rails-3":1,"selenium":1,"capybara":1},"answerCount":1,"nonacceptedCount":1},"background-process":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":1,"rake":1,"resque":1,"ruby-on-rails-2":1}},"resque":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":1,"rake":1,"background-process":1,"ruby-on-rails-2":1}},"ruby-on-rails-2":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":1,"rake":1,"background-process":1,"resque":1}},"ruby":{"activity":{"2013-01":{"commentCount":1,"answerCount":6,"acceptedCount":4,"nonacceptedCount":2},"2012-12":{"answerCount":1,"acceptedCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":5,"ruby-on-rails-3":7,"ruby-on-rails-3.2":2,"ruby-1.9.3":2,"rubygems":1,"rspec":2,"rspec2":1,"rspec-rails":1,"geocoding":1,"selenium":1,"rake":1,"capybara":1},"answerCount":7,"acceptedCount":5,"nonacceptedCount":2},"ruby-on-rails-3":{"activity":{"2013-01":{"commentCount":1,"answerCount":15,"acceptedCount":9,"nonacceptedCount":6},"2012-12":{"answerCount":9,"nonacceptedCount":4,"acceptedCount":5}},"commentCount":1,"relatedTags":{"ruby-on-rails":13,"ruby":7,"ruby-on-rails-3.2":5,"ruby-1.9.3":3,"update-attributes":1,"rubygems":1,"railstutorial.org":1,"rspec2":2,"factory-girl":1,"rspec":1,"rspec-rails":1,"geocoding":1,"decorator":1,"draper":1,"callback":2,"model-associations":1,"ruby-on-rails-3.2.1":1,"after-create":1,"postgresql":1,"heroku":1,"drop-table":1,"button":1,"radio-button":1,"actionmailer":1,"helpers":1,"selenium":1,"rake":1,"capybara":1,"webserver":1,"view":1,"activerecord":1,"gem":1,"rvm":1},"answerCount":24,"nonacceptedCount":10,"acceptedCount":14},"ruby-1.9.3":{"activity":{"2013-01":{"commentCount":1,"answerCount":2,"acceptedCount":1,"nonacceptedCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":2,"ruby":2,"ruby-on-rails-3":3,"ruby-on-rails-3.2":2,"decorator":1,"draper":1},"answerCount":2,"acceptedCount":1,"nonacceptedCount":1},"update-attributes":{"activity":{"2012-12":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1}},"rubygems":{"activity":{"2012-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby":1,"ruby-on-rails-3":1}},"database-design":{"activity":{"2012-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"activerecord":1}},"devise":{"activity":{"2012-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"cancan":1}},"cancan":{"activity":{"2012-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"devise":1}},"railstutorial.org":{"activity":{"2012-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"ruby-on-rails-3.2":1}},"rspec2":{"activity":{"2012-12":{"answerCount":1,"nonacceptedCount":1},"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":2,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails-3":2,"factory-girl":1,"ruby":1,"rspec":1,"rspec-rails":1},"acceptedCount":1},"factory-girl":{"activity":{"2012-12":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"rspec2":1}},"twitter-bootstrap":{"activity":{"2012-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"simple-form":1}},"simple-form":{"activity":{"2012-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"twitter-bootstrap":1}},"sqlite3":{"activity":{"2012-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"activerecord":1,"migration":1}},"migration":{"activity":{"2012-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"activerecord":1,"sqlite3":1}},"namespaces":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"activerecord":1,"associations":1}},"associations":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"activerecord":1,"namespaces":1}},"serialization":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"activerecord":1,"redis":1}},"redis":{"activity":{"2013-01":{"answerCount":2,"nonacceptedCount":1,"acceptedCount":1}},"answerCount":2,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":2,"activerecord":1,"serialization":1,"asynchronous":1,"actionmailer":1},"acceptedCount":1},"rspec":{"activity":{"2013-01":{"answerCount":3,"acceptedCount":3}},"answerCount":3,"acceptedCount":3,"relatedTags":{"ruby":2,"ruby-on-rails-3":1,"rspec2":1,"rspec-rails":2,"ruby-on-rails":2,"tdd":1}},"rspec-rails":{"activity":{"2013-01":{"answerCount":2,"acceptedCount":2}},"answerCount":2,"acceptedCount":2,"relatedTags":{"ruby":1,"ruby-on-rails-3":1,"rspec":2,"rspec2":1,"ruby-on-rails":1,"tdd":1}},"geocoding":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby":1,"ruby-on-rails-3":1}},"ruby-on-rails-3.1":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"single-table-inheritance":1}},"single-table-inheritance":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3.1":1}},"decorator":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"ruby-1.9.3":1,"draper":1}},"draper":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"decorator":1,"ruby-1.9.3":1}},"callback":{"activity":{"2013-01":{"answerCount":2,"acceptedCount":1,"nonacceptedCount":1}},"answerCount":2,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":2,"model-associations":1,"ruby-on-rails-3.2.1":1,"after-create":1,"activerecord":1},"nonacceptedCount":1},"model-associations":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"callback":1,"ruby-on-rails-3.2.1":1,"after-create":1}},"ruby-on-rails-3.2.1":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"callback":1,"model-associations":1,"after-create":1}},"after-create":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"callback":1,"model-associations":1,"ruby-on-rails-3.2.1":1}},"postgresql":{"activity":{"2013-01":{"answerCount":2,"acceptedCount":1,"nonacceptedCount":1}},"answerCount":2,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"heroku":1,"drop-table":1,"ruby-on-rails":1,"activerecord":1},"nonacceptedCount":1},"heroku":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"postgresql":1,"drop-table":1}},"drop-table":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"postgresql":1,"heroku":1}},"button":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"radio-button":1}},"radio-button":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"button":1}},"actionmailer":{"activity":{"2013-01":{"answerCount":2,"acceptedCount":2}},"answerCount":2,"acceptedCount":2,"relatedTags":{"ruby-on-rails":2,"ruby-on-rails-3":1,"helpers":1,"asynchronous":1,"redis":1}},"helpers":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1,"actionmailer":1}},"dao":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"activerecord":1}},"selenium":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby":1,"ruby-on-rails-3":1,"rake":1,"capybara":1}},"capybara":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby":1,"ruby-on-rails-3":1,"selenium":1,"rake":1}},"table":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"clone":1}},"clone":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"table":1}},"webserver":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1}},"xml":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1}},"postgresql-9.1":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"activerecord":1,"psql":1}},"psql":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"activerecord":1,"postgresql-9.1":1}},"view":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1}},"asynchronous":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"redis":1,"actionmailer":1}},"gem":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"rvm":1}},"rvm":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails-3":1,"gem":1}},"find":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1}},"extend":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1}},"tdd":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"rspec":1,"rspec-rails":1}},"ubuntu":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"console":1,"terminal":1,"command":1}},"console":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ubuntu":1,"terminal":1,"command":1}},"terminal":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ubuntu":1,"console":1,"command":1}},"command":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ubuntu":1,"console":1,"terminal":1}},"forms":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1}},"emacs":{"activity":{"2013-03":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"rbenv":1}},"rbenv":{"activity":{"2013-03":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"emacs":1}},"integration-testing":{"activity":{"2013-03":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1}}},"questions":[],"answers":{"14094007":{"id":"14094007","date":"2012-12","score":"1","body":"\"<p>You should make sure that you don't have any validation errors. You can check them using:<\\\/p>\\n\\n<pre><code>active_record_model.errors\\n<\\\/code><\\\/pre>\\n\\n<p>In your case, it would be<\\\/p>\\n\\n<pre><code>current_user.errors\\n<\\\/code><\\\/pre>\\n\\n<p>Also, you should print the return value from <code>update_attributes<\\\/code> to see if it's <code>true<\\\/code> or <code>false<\\\/code>. If you get <code>false<\\\/code>, the save was cancelled. This was most likely caused by validation errors or a callback returning <code>false<\\\/code>.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3><update-attributes>","commentcount":"2","accepted":""},"14094077":{"id":"14094077","date":"2012-12","score":"1","body":"\"<p>You should make sure that bundler required your gem. You should have a file <code>lib\\\/topic.rb<\\\/code>. Add a <code>puts<\\\/code> statement and check if it is shown when you boot your app or the console.<\\\/p>\\n\\n<p>As a side note. I don't think you should have a gemspec in the root of your directory. This will lead to the fact that your lib folder is used for the gem and for the rails app. It's better to create a subfolder for example <code>topic\\\/<\\\/code> and then host the gem inside. You can then add it in the Gemfile with:<\\\/p>\\n\\n<pre><code>gem 'topic', :path =&gt; '.\\\/topic'\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby><ruby-on-rails-3><rubygems>","commentcount":"0","accepted":"yes"},"14095894":{"id":"14095894","date":"2012-12","score":"1","body":"\"<p>What exactly did not work? I suggest you create an <code>on<\\\/code> scope to filter all the reservations, which are active on a given Date. Then you can use <code>pluck<\\\/code> to get an array of room ids to then fetch the Rooms themselves.<\\\/p>\\n\\n<p>The code could look something like (warning, written from the top of my head, not tested):<\\\/p>\\n\\n<pre><code>class Reservation &lt; ActiveRecord::Base\\n  scope :on, lambda {|day = Date.today| where('start &gt; ? AND end &lt; ?', day, day) }\\nend\\n\\nclass Room &lt; ActiveRecord::Base\\n  def self.free_on(day = Date.today)\\n    reserved_room_ids = Reservation.on(day).pluck('DISTINCT room_id')\\n    where('id NOT IN (?)', reserved_room_ids)\\n  end\\n\\n  def self.reserved_on(day = Date.today)\\n    reserved_room_ids = Reservation.on(day).pluck('DISTINCT room_id')\\n    where(:id =&gt; reserved_room_ids)\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>Now you can use <code>Room.free_on<\\\/code> or <code>Room.free_on(1.day.ago)<\\\/code> to get the free rooms for a given day. I also added the method to get to the reserved rooms.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><database-design><activerecord>","commentcount":"2","accepted":"yes"},"14096070":{"id":"14096070","date":"2012-12","score":"0","body":"\"<p>If you don't specify different behavior for the different formats there is no reason to use <code>respond_to<\\\/code>. If you have templates they will automatically be picked up by rails. The <code>respond_to<\\\/code> method is useful if you need different behavior per format:<\\\/p>\\n\\n<pre><code>respond_to do |format|\\n  format.html { render :edit }\\n  format.json { render :json =&gt; '{}' }\\nend\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3><ruby-on-rails-3.2>","commentcount":"0","accepted":""},"14096422":{"id":"14096422","date":"2012-12","score":"0","body":"\"<p>You can use <code>options_for_select<\\\/code> for this purpose. It takes a two dimensional Array. You can convert your hash like so:<\\\/p>\\n\\n<pre><code>data = [{\\\"name\\\"=&gt;\\\"NameA\\\", \\\"id\\\"=&gt;\\\"001\\\"}, {\\\"name\\\"=&gt;\\\"NameB\\\", \\\"id\\\"=&gt;\\\"002\\\"}]\\ndata_for_select = data.each { |hash| [hash['name'], hash['id']] }\\noptions_for_select(data_for_select)\\n<\\\/code><\\\/pre>\\n\\n<p>As a side note to <code>options_from_collection_for_select<\\\/code>, it is used in combination with objects. It iterates through the objects and sends a message for the label and one for the id. <\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails>","commentcount":"1","accepted":""},"14096440":{"id":"14096440","date":"2012-12","score":"7","body":"\"<p>You can configure the rails inflector. There should be an initializer file in your application to do so: <code>config\\\/initializers\\\/inflections.rb<\\\/code><\\\/p>\\n\\n<p>You can then add a call to \\\"teach\\\" rails the new rule:<\\\/p>\\n\\n<pre><code>ActiveSupport::Inflector.inflections do |inflect|\\n inflect.irregular 'tooth', 'teeth'\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>After you restart the server\\\/console the new pluralization should be in place.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails>","commentcount":"0","accepted":""},"14096461":{"id":"14096461","date":"2012-12","score":"0","body":"\"<p>If you don't pass the context through the url, you could store the selected organisation in the session. The problem with the session approach is, that you lose the ability to link to these pages directly since you rely on data stored in the session.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><devise><cancan>","commentcount":"2","accepted":"yes"},"14096519":{"id":"14096519","date":"2012-12","score":"5","body":"\"<p>you need to wrap the result of your <code>map<\\\/code> call with <code>raw<\\\/code>. This way you can tell rails that the string should be outputted directly into the template.<\\\/p>\\n\\n<pre><code>listed in &lt;%= raw(@product.categories.map{ |cat| raw(link_to(cat.name, category_path(cat))) }.join(', ') + \\\".\\\") %&gt;\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3>","commentcount":"1","accepted":"yes"},"14096649":{"id":"14096649","date":"2012-12","score":"1","body":"\"<p>1.) If the partial is rendered within the <code>show<\\\/code> action, the variable @user must be defined in that action. Rails won't execute the <code>destroy<\\\/code> method so the variable definition in there will never be executed.<\\\/p>\\n\\n<p>Since HTTP is a stateless protocol, the server needs to create the necessary state on every request. That's why @user must be defined in every action.<\\\/p>\\n\\n<p>2.) Where did you check that the url is \\\"\\\/users\\\/2\\\"? As I don't see the whole code I can only make guesses but the following line <code>current_user.relationships.find_by_followed_id(@user)<\\\/code> should return a <code>Relationship<\\\/code> object. It will be translated into something like \\\"\\\/relationships\\\/8\\\", where 8 is the ID of the <code>Relationship<\\\/code>. Because you specify `method: :delete, the destroy action will be invoked.<\\\/p>\\n\\n<p>I think the url \\\"\\\/users\\\/2\\\" is after the destroy action performed the deletion was performed. There could be a redirect in the destroy action. (eg. <code>redirect_to current_user<\\\/code>). You can see all the invoked actions in the log file. Try scrolling through the log and see if you can find <code>RelationshipsController#destroy<\\\/code>. You will see the invoked url there. Also you could inspect the HTML to see where the <code>&lt;form&gt;<\\\/code> tag's \\\"action\\\" attribute points to.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails-3><ruby-on-rails-3.2><railstutorial.org>","commentcount":"1","accepted":"yes"},"14100941":{"id":"14100941","date":"2012-12","score":"1","body":"\"<p>the <code>label_tag<\\\/code> method uses `String#humanize\\\" to make it look nicer (http:\\\/\\\/api.rubyonrails.org\\\/classes\\\/String.html#method-i-humanize). So in your example you could do:<\\\/p>\\n\\n<pre><code>= f.send(field_type, field, :class =&gt; field_type, :placeholder =&gt; field.to_s.humanize)\\n<\\\/code><\\\/pre>\\n\\n<p>As previously mentioned in the comments, you should have a look at available form-builders. They abstract a lot of pain associated with making nice forms. Some links are:<\\\/p>\\n\\n<ul>\\n<li><a href=\\\"https:\\\/\\\/github.com\\\/plataformatec\\\/simple_form\\\" rel=\\\"nofollow\\\">https:\\\/\\\/github.com\\\/plataformatec\\\/simple_form<\\\/a><\\\/li>\\n<li><a href=\\\"https:\\\/\\\/github.com\\\/justinfrench\\\/formtastic\\\" rel=\\\"nofollow\\\">https:\\\/\\\/github.com\\\/justinfrench\\\/formtastic<\\\/a><\\\/li>\\n<\\\/ul>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3>","commentcount":"0","accepted":"yes"},"14102438":{"id":"14102438","date":"2012-12","score":"1","body":"\"<p>I would not use <code>Factory.create<\\\/code> to trigger the process. FactoryGirl should be used to create the test setup, not to trigger the actual code you want to test. Your test would then look like:<\\\/p>\\n\\n<pre><code>it 'should add lecture to question_type' do      \\n  course = Factory(:course, :start_time =&gt; Time.now - 1.hour, :end_time =&gt; Time.now)\\n  question = Factory.build(:question, :course_id =&gt; course.id, :created_at =&gt; Time.now - 10.minutes, :question_type =&gt; nil)\\n\\n  question.save!                          \\n  question..reload.question_type.should == 'lecture'      \\nend\\n<\\\/code><\\\/pre>\\n\\n<p>If this test still fails, you can start debugging:<\\\/p>\\n\\n<p>Add a puts statement inside <code>add_type_to_question<\\\/code> and another one inside the <code>if<\\\/code> statement and see what happens.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails-3><rspec2><factory-girl>","commentcount":"0","accepted":""},"14102467":{"id":"14102467","date":"2012-12","score":"1","body":"\"<p>You need to know that even if you have a special CSS file just for roles. In the end, every CSS file is bundled up and served together. This means, that roles.css will be loaded on every page, which results in the behavior you described.<\\\/p>\\n\\n<p>If you want to style a single form, you can do this by adding a class:<\\\/p>\\n\\n<pre><code>= simple_form_for @role, :html =&gt; { :class =&gt; 'form-horizontal roles-form' } do |f| \\n<\\\/code><\\\/pre>\\n\\n<p>Now you can scope your CSS definitions to <code>.roles-form<\\\/code> and they will only apply to this single form.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><twitter-bootstrap><simple-form>","commentcount":"3","accepted":"yes"},"14102560":{"id":"14102560","date":"2012-12","score":"3","body":"\"<p>The easiest thing you can do is just execute the raw SQL to define the table. This would look something like:<\\\/p>\\n\\n<pre><code>class CreateAccounts &lt; ActiveRecord::Migration\\n  def up\\n    execute &lt;&lt;-SQL\\n    CREATE TABLE \\\"accounts\\\" (\\n      \\\"id\\\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL DEFAULT (0),\\n      \\\"username\\\" TEXT NOT NULL COLLATE NOCASE,\\n      \\\"password_hash\\\" BLOB NOT NULL,\\n      \\\"creation_time\\\" INTEGER NOT NULL DEFAULT(strftime('%s', 'now')),\\n      \\\"expiration_time\\\" INTEGER NOT NULL DEFAULT(strftime('%s', 'now') + 2592000)\\n    )\\n    SQL\\n  end\\n\\n  def down\\n    remove_table :accounts\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>This way you will end up with the same table you had before. I'm not completely sure if you can express such a table definition with the current migration DSL. You should be able to verify it though. If you have a migration with the raw SQL like the one above, you can run <code>rake db:migrate<\\\/code>. This should generate a new <code>db\\\/schema.rb<\\\/code>. You can then open that file and search for the accounts table and look at the definition. If everything is included, you can copy that definition back into the migration.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><activerecord><sqlite3><migration>","commentcount":"0","accepted":"yes"},"14102840":{"id":"14102840","date":"2012-12","score":"1","body":"\"<p>If you are using <code>accepts_nested_attributes_for<\\\/code> you don't need an extra controller to manage the records. Of course if you need specific pages like a \\\"show view\\\" for a receipt you need that controller.<\\\/p>\\n\\n<p>To get <code>accepts_nested_attributes_for<\\\/code> you need:<\\\/p>\\n\\n<ol>\\n<li>A form for your report<\\\/li>\\n<li>use <code>fields_for :receipts<\\\/code> in that form<\\\/li>\\n<\\\/ol>\\n\\n<p>This way you can edit all created receipts for a given report. If you also want to create new receipts you can add a blank receipt with: <code>@report.receipts.build<\\\/code>. You can add this call to your <code>new<\\\/code> and <code>edit<\\\/code> actions.<\\\/p>\\n\\n<p>Note that you edit the receipts in a form for the report. This means, that you should hit the <code>ReportsController<\\\/code> and not the <code>ReceiptsController<\\\/code>.<\\\/p>\\n\\n<p>If things do not work here is some debugging advice:<\\\/p>\\n\\n<ul>\\n<li>execute rake routes to see if everything is defined correctly.<\\\/li>\\n<li>Inspect the generated HTML from <code>form_for(@report)<\\\/code>. Especially the 'action=\\\"\\\"' attribute of the form tag is relevant. It should point to \\\"\\\/reports\\\/X\\\"<\\\/li>\\n<\\\/ul>\\n\\n<p>EDIT: I created a Gist with all the relevant files to get a nested form working: <a href=\\\"https:\\\/\\\/gist.github.com\\\/4420280\\\" rel=\\\"nofollow\\\">https:\\\/\\\/gist.github.com\\\/4420280<\\\/a><\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3>","commentcount":"1","accepted":""},"14103055":{"id":"14103055","date":"2012-12","score":"1","body":"\"<p>If you need to have access to the exact error from a child record, you must not reach through the parent's errors collection. The child records themselves have a errors-collection where you can get detailed access. The aggregated error on the parent only illustrates that the record can't be saved because there are invalid child records.<\\\/p>\\n\\n<p>If you need all errors you need to aggregate them yourself. (as you did with your <code>collect<\\\/code> call). If this code is used multiple times consider to move it into a method on <code>Auction<\\\/code><\\\/p>\\n\\n<pre><code>class Auction\\n  def aggregated_errors\\n    errors = self.errors.to_hash\\n    errors['values'] = Hash[values.reject{ |v| v.valid? }.collect{ |v| [v.attribute_id, v.errors.to_hash]}]\\n    errors\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>If you need to aggregate the errors of different models and associations you can further abstract the <code>collect<\\\/code> call to reuse it across models.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><activerecord>","commentcount":"0","accepted":""},"14103923":{"id":"14103923","date":"2012-12","score":"2","body":"\"<p>The problem could be the directory structure in your lib folder. That the rails autoloader can find your file, it needs to be placed in the right spot. Your <code>MyApp::Utility<\\\/code> module should live in a file called: <code>lib\\\/my_app\\\/utility.rb<\\\/code>.<\\\/p>\\n\\n<p>If you place the file directly in lib <code>lib\\\/utility.rb<\\\/code> the autoloader won't find it.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails-3><ruby-on-rails-3.2>","commentcount":"1","accepted":"yes"},"14111663":{"id":"14111663","date":"2013-01","score":"1","body":"\"<p>You can use the <code>:foreign_key =&gt; 'accounting_invoice_id<\\\/code> option to tell rails which field to use. Check out the docs of <code>has_many<\\\/code> for more informations (http:\\\/\\\/api.rubyonrails.org\\\/classes\\\/ActiveRecord\\\/Associations\\\/ClassMethods.html#method-i-has_many).<\\\/p>\\n\\n<p>The relevant part is:<\\\/p>\\n\\n<pre><code>:foreign_key\\nSpecify the foreign key used for the association. By default this is guessed to be the name of this class in lower-case and ?_id? suffixed. So a Person class that makes a has_many association will use ?person_id? as the default :foreign_key.\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><activerecord><namespaces><associations>","commentcount":"0","accepted":""},"14111692":{"id":"14111692","date":"2013-01","score":"0","body":"\"<p>You can use <code>Marshal.dump<\\\/code> and <code>Marshal.load<\\\/code> to serialize AR objects and then load them back. This has some drawbacks though. With the current version of rails the autoloading does not play nice with <code>Marshal.load<\\\/code>. There was a recent PR to get <code>Marshal.load<\\\/code> and the autoloader working together. (https:\\\/\\\/github.com\\\/rails\\\/rails\\\/pull\\\/8246).<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><activerecord><serialization><redis>","commentcount":"0","accepted":""},"14112185":{"id":"14112185","date":"2013-01","score":"2","body":"\"<p>The Problem is that the <code>userr<\\\/code> you build with FactoryGirl does not have an ID. Thats why the expectation tells you that you expected <code>:user_id=&gt;nil<\\\/code>. The ID will be generated when AR saves the record, so there is no way that you can guess the generated ID ahead of time. You could use a less restrictive assertion on the mock:<\\\/p>\\n\\n<pre><code>UserGraph.should_receive(:create).with(hash_including(:user_id))\\n<\\\/code><\\\/pre>\\n\\n<p>This will verify that a hash is passed with a <code>:user_id<\\\/code> key. You can find more about <code>hash_including<\\\/code> here: <a href=\\\"http:\\\/\\\/rubydoc.info\\\/gems\\\/rspec-mocks\\\/RSpec\\\/Mocks\\\/ArgumentMatchers:hash_including\\\" rel=\\\"nofollow\\\">http:\\\/\\\/rubydoc.info\\\/gems\\\/rspec-mocks\\\/RSpec\\\/Mocks\\\/ArgumentMatchers:hash_including<\\\/a><\\\/p>\\n\\n<p>Another thing you can try (not sure if it works) is to match against the <code>kind_of<\\\/code> matcher of rspec. This would make sure that a number was passed with <code>:user_id<\\\/code><\\\/p>\\n\\n<pre><code>UserGraph.should_receive(:create).with(:user_id =&gt; kind_of(Numeric))\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby><ruby-on-rails-3><rspec><rspec2><rspec-rails>","commentcount":"0","accepted":"yes"},"14114183":{"id":"14114183","date":"2013-01","score":"5","body":"\"<p>your two fields are generated using a form builder <code>f<\\\/code>. I suspect they are inside a <code>form_for<\\\/code> call. The consequences of this are that the field names will be nested in a namespace for your model. This means that <code>params[&lt;model name&gt;][:longitude]<\\\/code> and <code>params[&lt;model name&gt;][:latitude]<\\\/code> should have the content of the fields.<\\\/p>\\n\\n<p>You can check your console to see what parameters were received by rails. Alternatively you can print the params hash to the console to inspect it's content: <code>p params<\\\/code> (somewhere in your action).<\\\/p>\\n\\n<p>So in order to get everything working you need to access the right params. (Something like <code>params[:location][:longitude]<\\\/code>)<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby><ruby-on-rails-3><geocoding>","commentcount":"2","accepted":"yes"},"14114262":{"id":"14114262","date":"2013-01","score":"2","body":"\"<p>What you are looking for are \\\"polymorphic associations\\\". You can find more in the rails guides: <a href=\\\"http:\\\/\\\/guides.rubyonrails.org\\\/association_basics.html#polymorphic-associations\\\" rel=\\\"nofollow\\\">http:\\\/\\\/guides.rubyonrails.org\\\/association_basics.html#polymorphic-associations<\\\/a><\\\/p>\\n\\n<p>Your case is a bit special because you want to use polymorphic associations with STI. I remember that there was a bug with this combination but it could be fixed by now.<\\\/p>\\n\\n<p>I did not read it completely but this blog post seems to describe the situation: <a href=\\\"http:\\\/\\\/www.archonsystems.com\\\/devblog\\\/2011\\\/12\\\/20\\\/rails-single-table-inheritance-with-polymorphic-association\\\/\\\" rel=\\\"nofollow\\\">http:\\\/\\\/www.archonsystems.com\\\/devblog\\\/2011\\\/12\\\/20\\\/rails-single-table-inheritance-with-polymorphic-association\\\/<\\\/a><\\\/p>\\n\\n<p>The problem I encountered with polymorphic associations and STI is described here: <a href=\\\"http:\\\/\\\/stackoverflow.com\\\/questions\\\/9628610\\\/why-polymorphic-association-doesnt-work-for-sti-if-type-column-of-the-polymorph\\\">Why polymorphic association doesn&#39;t work for STI if type column of the polymorphic association doesn&#39;t point to the base model of STI?<\\\/a><\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3.1><single-table-inheritance>","commentcount":"0","accepted":""},"14121476":{"id":"14121476","date":"2013-01","score":"0","body":"\"<p>The Problem is this section in v0.12.0 (the one you are using) <a href=\\\"https:\\\/\\\/github.com\\\/drapergem\\\/draper\\\/blob\\\/v0.12.0\\\/lib\\\/draper\\\/railtie.rb#L5-L8\\\" rel=\\\"nofollow\\\">https:\\\/\\\/github.com\\\/drapergem\\\/draper\\\/blob\\\/v0.12.0\\\/lib\\\/draper\\\/railtie.rb#L5-L8<\\\/a><\\\/p>\\n\\n<p>When I look at the master branch they changed to code to look like: <a href=\\\"https:\\\/\\\/github.com\\\/drapergem\\\/draper\\\/blob\\\/master\\\/lib\\\/draper\\\/railtie.rb#L5-L10\\\" rel=\\\"nofollow\\\">https:\\\/\\\/github.com\\\/drapergem\\\/draper\\\/blob\\\/master\\\/lib\\\/draper\\\/railtie.rb#L5-L10<\\\/a><\\\/p>\\n\\n<p>You should upgrade your draper gem to the latest release and see if the error still occurs.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails-3><decorator><ruby-1.9.3><draper>","commentcount":"3","accepted":"yes"},"14123094":{"id":"14123094","date":"2013-01","score":"6","body":"\"<p>The order of the declarations in your model can have an impact on the execution order of the code. This is a source for various weird things. (for example, currently callback definitions and has_and_belongs_to_many associations are order dependent: <a href=\\\"https:\\\/\\\/github.com\\\/rails\\\/rails\\\/pull\\\/8674\\\">https:\\\/\\\/github.com\\\/rails\\\/rails\\\/pull\\\/8674<\\\/a> )<\\\/p>\\n\\n<p>To debug the issue you need to browse the rails source. Since your problem has to do with execution order, callbacks and nested attributes I would start by reading up on:<\\\/p>\\n\\n<ul>\\n<li><a href=\\\"https:\\\/\\\/github.com\\\/rails\\\/rails\\\/blob\\\/master\\\/activerecord\\\/lib\\\/active_record\\\/nested_attributes.rb#L256\\\">https:\\\/\\\/github.com\\\/rails\\\/rails\\\/blob\\\/master\\\/activerecord\\\/lib\\\/active_record\\\/nested_attributes.rb#L256<\\\/a><\\\/li>\\n<li><a href=\\\"https:\\\/\\\/github.com\\\/rails\\\/rails\\\/blob\\\/master\\\/activerecord\\\/lib\\\/active_record\\\/callbacks.rb#L302\\\">https:\\\/\\\/github.com\\\/rails\\\/rails\\\/blob\\\/master\\\/activerecord\\\/lib\\\/active_record\\\/callbacks.rb#L302<\\\/a><\\\/li>\\n<li><a href=\\\"https:\\\/\\\/github.com\\\/rails\\\/rails\\\/blob\\\/master\\\/activemodel\\\/lib\\\/active_model\\\/callbacks.rb#L98\\\">https:\\\/\\\/github.com\\\/rails\\\/rails\\\/blob\\\/master\\\/activemodel\\\/lib\\\/active_model\\\/callbacks.rb#L98<\\\/a><\\\/li>\\n<\\\/ul>\\n\\n<p>This gives you the necessary background to dig deeper. You'll notice that <code>accepts_nested_attributes_for<\\\/code> calls into <code>add_autosave_association_callbacks<\\\/code> <a href=\\\"https:\\\/\\\/github.com\\\/rails\\\/rails\\\/blob\\\/master\\\/activerecord\\\/lib\\\/active_record\\\/autosave_association.rb#L173\\\">https:\\\/\\\/github.com\\\/rails\\\/rails\\\/blob\\\/master\\\/activerecord\\\/lib\\\/active_record\\\/autosave_association.rb#L173<\\\/a>\\nThis method adds an <code>after_create<\\\/code> callback and as far as I know callbacks are executed in order of definition.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails-3><callback><model-associations><ruby-on-rails-3.2.1><after-create>","commentcount":"1","accepted":"yes"},"14126239":{"id":"14126239","date":"2013-01","score":"5","body":"\"<p>You could try to use <code>heroku pg:psql<\\\/code>. This should open a console to your database where you can execute arbitrary SQL:<\\\/p>\\n\\n<pre><code>DROP TABLE products;\\n<\\\/code><\\\/pre>\\n\\n<p>You can find more about pg:psql in the heroku docs: <a href=\\\"https:\\\/\\\/devcenter.heroku.com\\\/articles\\\/heroku-postgresql#pgpsql\\\" rel=\\\"nofollow\\\">https:\\\/\\\/devcenter.heroku.com\\\/articles\\\/heroku-postgresql#pgpsql<\\\/a><\\\/p>\\n\\n<p>PostgreSQL docs for the same: <a href=\\\"http:\\\/\\\/www.postgresql.org\\\/docs\\\/9.1\\\/static\\\/sql-droptable.html\\\" rel=\\\"nofollow\\\">http:\\\/\\\/www.postgresql.org\\\/docs\\\/9.1\\\/static\\\/sql-droptable.html<\\\/a><\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails-3><postgresql><heroku><drop-table>","commentcount":"0","accepted":"yes"},"14129430":{"id":"14129430","date":"2013-01","score":"1","body":"\"<p>You need to pass the arguments to <code>form_for<\\\/code> not to the <code>f.submit<\\\/code> call. If you have a persisted user assigned to <code>@user<\\\/code> you should be able to do:<\\\/p>\\n\\n<pre><code>&lt;%= form_for @user do |f| %&gt;\\n    &lt;label&gt;On&lt;\\\/label&gt;\\n    &lt;%= f.radio_button :email_switch, true %&gt;\\n    &lt;label&gt;Off&lt;\\\/label&gt;\\n    &lt;%= f.radio_button :email_switch, false %&gt;\\n    &lt;%= f.submit \\\"Save\\\" %&gt;\\n&lt;% end %&gt;\\n<\\\/code><\\\/pre>\\n\\n<p>Of course you need <code>resources :users<\\\/code> in your <code>config\\\/routes.rb<\\\/code> to get this working. This should then send a PUT request to <code>\\\/users\\\/47<\\\/code>, which in turn fires the <code>#update<\\\/code> action of your <code>UsersController<\\\/code><\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails-3><button><radio-button>","commentcount":"1","accepted":""},"14129464":{"id":"14129464","date":"2013-01","score":"3","body":"\"<p>This is a rails bug. I tracked it down and submitted a PR to solve the problem <a href=\\\"https:\\\/\\\/github.com\\\/rails\\\/rails\\\/pull\\\/8701\\\" rel=\\\"nofollow\\\">https:\\\/\\\/github.com\\\/rails\\\/rails\\\/pull\\\/8701<\\\/a><\\\/p>\\n\\n<p>I think we can merge it in in the near future. I'll try to backport the patch to <code>3-2-stable<\\\/code> so that it will be available in the next <code>3.2.x<\\\/code> release.<\\\/p>\\n\\n<p>EDIT: PR is merged into rails\\\/master and rails\\\/3-2-stable. Sadly a little to lait for 3.2.10, need to wait for the next release ;).<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><actioncontroller>","commentcount":"0","accepted":"yes"},"14140153":{"id":"14140153","date":"2013-01","score":"1","body":"\"<p>If you include a <code>Module<\\\/code> the methods will be accessible as instance methods. If you try to access the <code>next_workday<\\\/code> method directly through the module, the method must be defined as a \\\"class method\\\" (with <code>self.<\\\/code>).<\\\/p>\\n\\n<p>Your <code>MailHelper<\\\/code> should work if you use:<\\\/p>\\n\\n<pre><code>module MailHelper\\n  include Workday\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>There is no need to define the <code>next_workday<\\\/code> method in <code>MailHelper<\\\/code> since it just delegates to <code>Workday#next_workday<\\\/code> anyways. If you include your <code>MailHelper<\\\/code> into a class you can then access the method with <code>next_workday<\\\/code><\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3><actionmailer><helpers>","commentcount":"1","accepted":"yes"},"14140296":{"id":"14140296","date":"2013-01","score":"0","body":"\"<p>Both DAO and ActiveRecord are patterns to access data in a Database. DAO stands for \\\"Data Acess Object\\\". Following are the links to the relevant Wikipedia pages to read more about the individual patterns.<\\\/p>\\n\\n<ul>\\n<li>ActiveRecord: <a href=\\\"http:\\\/\\\/en.wikipedia.org\\\/wiki\\\/Active_record_pattern\\\" rel=\\\"nofollow\\\">http:\\\/\\\/en.wikipedia.org\\\/wiki\\\/Active_record_pattern<\\\/a><\\\/li>\\n<li>DAO: <a href=\\\"http:\\\/\\\/en.wikipedia.org\\\/wiki\\\/Data_access_object\\\" rel=\\\"nofollow\\\">http:\\\/\\\/en.wikipedia.org\\\/wiki\\\/Data_access_object<\\\/a><\\\/li>\\n<\\\/ul>\\n\\n<p>Note that the ruby gem activerecord is an implementation of the \\\"Active Record\\\" patterns, which happens to have the same name as the pattern.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<activerecord><dao>","commentcount":"0","accepted":"yes"},"14141873":{"id":"14141873","date":"2013-01","score":"0","body":"\"<p>You need to require the rails environment before your tests can run. You should add the require to the top of your <code>test_helper.rb<\\\/code><\\\/p>\\n\\n<pre><code>require File.expand_path(\\\"..\\\/..\\\/..\\\/config\\\/environment\\\", __FILE__)\\n<\\\/code><\\\/pre>\\n\\n<p>Of course the amount of <code>..\\\/<\\\/code> you have to do varies on the depth of your test folders. The config folder is located in the root of your application.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby><ruby-on-rails-3><selenium><rake><capybara>","commentcount":"1","accepted":""},"14142909":{"id":"14142909","date":"2013-01","score":"2","body":"\"<p>After you clone your application you need to bring the database up to the latest version. You can do this by running:<\\\/p>\\n\\n<pre><code>rake db:migrate\\n<\\\/code><\\\/pre>\\n\\n<p>To put the data from <code>db\\\/seeds.rb<\\\/code> into the database you need to run:<\\\/p>\\n\\n<pre><code>rake db:seed\\n<\\\/code><\\\/pre>\\n\\n<p>The \\\"Too many redirects\\\" error is probably because of the redirect when <code>CanCan::AccessDenied<\\\/code> is thrown. I suspect that your <code>root_url<\\\/code> is also needs authentication, which results in another <code>CanCan::AccessDenied<\\\/code>, which redirects to the <code>root_url<\\\/code> and on and on.<\\\/p>\\n\\n<p>You should redirect to a page without authentication, like the signup page.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><table><clone>","commentcount":"2","accepted":"yes"},"14145584":{"id":"14145584","date":"2013-01","score":"1","body":"\"<p>This problem exists because you are using an ActiveRecord model as a namespace. I created a gist with some experimentation until I saw the root cause.<\\\/p>\\n\\n<p><code>ActiveRecord<\\\/code> models include the <code>ActiveRecord::Associations<\\\/code> module. Since you can get to a constant when including a module the <code>Builder<\\\/code> constant defined within <code>Associations<\\\/code> is now also reachable through the AR model. You will get this behavior with every class defined in the modules, which are included into an AR model:<\\\/p>\\n\\n<pre><code>1.9.3-p194 :010 &gt; Post.ancestors\\n =&gt; [Post(id: integer, title: string, published_at: datetime, created_at: datetime, updated_at: datetime), Post::GeneratedFeatureMethods, #&lt;Module:0x007fec74dc33a0&gt;, ActiveRecord::Base, ActiveRecord::Core, ActiveRecord::Store, ActiveRecord::Serialization, ActiveModel::Serializers::Xml, ActiveModel::Serializers::JSON, ActiveModel::Serialization, ActiveRecord::Reflection, ActiveRecord::Transactions, ActiveRecord::Aggregations, ActiveRecord::NestedAttributes, ActiveRecord::AutosaveAssociation, ActiveModel::SecurePassword, ActiveRecord::Associations, ActiveRecord::Timestamp, ActiveModel::Validations::Callbacks, ActiveRecord::Callbacks, ActiveRecord::AttributeMethods::Serialization, ActiveRecord::AttributeMethods::Dirty, ActiveModel::Dirty, ActiveRecord::AttributeMethods::TimeZoneConversion, ActiveRecord::AttributeMethods::PrimaryKey, ActiveRecord::AttributeMethods::Query, ActiveRecord::AttributeMethods::BeforeTypeCast, ActiveRecord::AttributeMethods::Write, ActiveRecord::AttributeMethods::Read, ActiveRecord::AttributeMethods, ActiveModel::AttributeMethods, ActiveRecord::Locking::Pessimistic, ActiveRecord::Locking::Optimistic, ActiveRecord::CounterCache, ActiveRecord::Validations, ActiveModel::Validations::HelperMethods, ActiveSupport::Callbacks, ActiveModel::Validations, ActiveRecord::Integration, ActiveModel::Conversion, ActiveRecord::AttributeAssignment, ActiveModel::ForbiddenAttributesProtection, ActiveModel::DeprecatedMassAssignmentSecurity, ActiveRecord::Sanitization, ActiveRecord::Scoping::Named, ActiveRecord::Scoping::Default, ActiveRecord::Scoping, ActiveRecord::Inheritance, ActiveRecord::ModelSchema, ActiveRecord::ReadonlyAttributes, ActiveRecord::Persistence, Object, PP::ObjectMixin, ActiveSupport::Dependencies::Loadable, V8::Conversion::Object, JSON::Ext::Generator::GeneratorMethods::Object, Kernel, BasicObject] \\n<\\\/code><\\\/pre>\\n\\n<p>A possible solution is to use a module as a namespace. For example <code>module Notifications<\\\/code>.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby><ruby-on-rails-3><ruby-on-rails-3.2><ruby-1.9.3>","commentcount":"0","accepted":""},"14146935":{"id":"14146935","date":"2013-01","score":"4","body":"\"<p>I think rails simply passes on the server option provided to rack. Rack has the following logic to determine what server to run:<\\\/p>\\n\\n<p><a href=\\\"https:\\\/\\\/github.com\\\/rack\\\/rack\\\/blob\\\/master\\\/lib\\\/rack\\\/server.rb#L271-L273\\\" rel=\\\"nofollow\\\">https:\\\/\\\/github.com\\\/rack\\\/rack\\\/blob\\\/master\\\/lib\\\/rack\\\/server.rb#L271-L273<\\\/a><\\\/p>\\n\\n<pre><code>def server\\n  @_server ||= Rack::Handler.get(options[:server]) || Rack::Handler.default(options)\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>The first case is when a <code>:server<\\\/code> option was passed to the <code>rails server<\\\/code> command. The second is to determine the default. It looks like:<\\\/p>\\n\\n<p><a href=\\\"https:\\\/\\\/github.com\\\/rack\\\/rack\\\/blob\\\/master\\\/lib\\\/rack\\\/handler.rb#L46-L59\\\" rel=\\\"nofollow\\\">https:\\\/\\\/github.com\\\/rack\\\/rack\\\/blob\\\/master\\\/lib\\\/rack\\\/handler.rb#L46-L59<\\\/a><\\\/p>\\n\\n<pre><code>def self.default(options = {})\\n  # Guess.\\n  if ENV.include?(\\\"PHP_FCGI_CHILDREN\\\")\\n    # We already speak FastCGI\\n    options.delete :File\\n    options.delete :Port\\n\\n    Rack::Handler::FastCGI\\n  elsif ENV.include?(\\\"REQUEST_METHOD\\\")\\n    Rack::Handler::CGI\\n  else\\n    pick ['thin', 'puma', 'webrick']\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>Thin and Puma should be automatically picked up. The fallback is Webrick. Of course other web servers could override this behavior to make them the first in the chain.<\\\/p>\\n\\n<p>If your Webserver is not picked up by default you could monkey-patch the <code>default<\\\/code> method to work like you want it. Of course this could break in future versions of rack.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3><webserver>","commentcount":"0","accepted":"yes"},"14153644":{"id":"14153644","date":"2013-01","score":"1","body":"\"<p>By default the <code>open<\\\/code> method in ruby is used to open files. If you want to directly open an URL you need to <code>require 'open-uri'<\\\/code>. More information can be found in the docs: <a href=\\\"http:\\\/\\\/www.ruby-doc.org\\\/stdlib-1.9.3\\\/libdoc\\\/open-uri\\\/rdoc\\\/OpenURI.html\\\" rel=\\\"nofollow\\\">http:\\\/\\\/www.ruby-doc.org\\\/stdlib-1.9.3\\\/libdoc\\\/open-uri\\\/rdoc\\\/OpenURI.html<\\\/a><\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><xml>","commentcount":"1","accepted":"yes"},"14167122":{"id":"14167122","date":"2013-01","score":"0","body":"\"<p>You can drop any PG index with the SQL:<\\\/p>\\n\\n<pre><code>DROP INDEX &lt;INDEX NAME&gt;\\n<\\\/code><\\\/pre>\\n\\n<p>rails generates index names automatically for you. You can see the list of defined indexes if you connect to your database using <code>psql<\\\/code> and type: <code>\\\\di<\\\/code>. This will output a list of indexes currently defined for your database. Simply copy the name over to the <code>DROP INDEX<\\\/code> command and you should be good to go.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><activerecord><postgresql-9.1><psql>","commentcount":"0","accepted":""},"14167183":{"id":"14167183","date":"2013-01","score":"1","body":"\"<p>If you want to select an option, you need to pass the value to the <code>options_for_select<\\\/code> method. If you lookup the signature for the method you will find: <\\\/p>\\n\\n<pre><code>options_for_select(container, selected = nil)\\n<\\\/code><\\\/pre>\\n\\n<p>Further reading of the docs at <a href=\\\"http:\\\/\\\/api.rubyonrails.org\\\/classes\\\/ActionView\\\/Helpers\\\/FormOptionsHelper.html#method-i-options_for_select\\\" rel=\\\"nofollow\\\">http:\\\/\\\/api.rubyonrails.org\\\/classes\\\/ActionView\\\/Helpers\\\/FormOptionsHelper.html#method-i-options_for_select<\\\/a> will lead you to the example:<\\\/p>\\n\\n<pre><code>options_for_select([\\\"Free\\\", \\\"Basic\\\", \\\"Advanced\\\", \\\"Super Platinum\\\"], :selected =&gt; \\\"Free\\\", :disabled =&gt; \\\"Super Platinum\\\")\\n  &lt;option value=\\\"Free\\\" selected=\\\"selected\\\"&gt;Free&lt;%roption&gt;\\\\n&lt;option value=\\\"Basic\\\"&gt;Basic&lt;\\\/ption&gt;\\\\n&lt;option value=\\\"Advanced\\\"&gt;Advanced&lt;%roption&gt;\\\\n&lt;option value=\\\"Super Platinum\\\" disabled=\\\"disabled\\\"&gt;Super Platinum&lt;\\\/option&gt;\\n<\\\/code><\\\/pre>\\n\\n<p>In your case you should be able to get it working with:<\\\/p>\\n\\n<pre><code>&lt;%= select_tag :genre, options_for_select(Genre.all.map{ |g| [g.name, g.id] },  :selected =&gt; params[:genre]) %&gt;\\n<\\\/code><\\\/pre>\\n\\n<p>As a side note. I guess <code>Genre<\\\/code> is an ActiveRecord model. In this case you can use <code>options_from_collection_for_select<\\\/code>. This method is designed to create a list of options tags from an array of ActiveRecord models. You find the docs at: <a href=\\\"http:\\\/\\\/api.rubyonrails.org\\\/classes\\\/ActionView\\\/Helpers\\\/FormOptionsHelper.html#method-i-options_from_collection_for_select\\\" rel=\\\"nofollow\\\">http:\\\/\\\/api.rubyonrails.org\\\/classes\\\/ActionView\\\/Helpers\\\/FormOptionsHelper.html#method-i-options_from_collection_for_select<\\\/a><\\\/p>\\n\\n<p>Your code could look something like:<\\\/p>\\n\\n<pre><code>&lt;%= select_tag :genre, options_from_collection_for_select(Genre.all, 'id', 'name', params[:genre]) %&gt;\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3><view>","commentcount":"1","accepted":"yes"},"14171070":{"id":"14171070","date":"2013-01","score":"2","body":"\"<p>If you want to use <code>find_or_initialize_by<\\\/code> you need to think carefully about the implications. Lets take your first example:<\\\/p>\\n\\n<pre><code>  newaverage = TradeDailyAverage.find_or_initialize_by_date(date)\\n  newaverage.update_attributes :averageprice =&gt; dailyaverage\\n<\\\/code><\\\/pre>\\n\\n<p>This should work, when the <code>TradeDailyAverage<\\\/code> for the given <code>date<\\\/code> is already in the database. It should not work however, when you get a new record back. The reason is simply because a new record is not persisted to the database. There is no way for <code>update_attributes<\\\/code> to update a non persisted record. You have two options here:<\\\/p>\\n\\n<p>1.) Do not use <code>update_attributes<\\\/code> but assign the value and call <code>save<\\\/code>. This works for both, new and created records:<\\\/p>\\n\\n<pre><code>  newaverage = TradeDailyAverage.find_or_initialize_by_date(date)\\n  newaverage.averageprice = dailyaverage\\n  newaverage.save\\n<\\\/code><\\\/pre>\\n\\n<p>2.) Do not use <code>find_or_initialize_by<\\\/code> but <code>find_or_create_by<\\\/code>. This way if the record does not exist, a new one is directly written to the database. Now <code>update_attributes<\\\/code> should work because you always get persisted records back. Note that this approach has the drawback that you save records without an <code>averageprice<\\\/code> to the database. I would not recommend that.<\\\/p>\\n\\n<p>The explanation above should also explain your second example:<\\\/p>\\n\\n<pre><code>newaverage = TradeDailyAverage.find_or_initialize_by_date(date)\\nputs newaverage.averageprice\\nputs newaverage.date\\n<\\\/code><\\\/pre>\\n\\n<p>This should output the <code>averageprice<\\\/code> and the date for persisted records. If you get a newly initialized record back though, it will only display the date. Since you only initialized the record with a date object, there is no way that the <code>averageprice<\\\/code> is already set.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><postgresql><activerecord>","commentcount":"0","accepted":""},"14172456":{"id":"14172456","date":"2013-01","score":"1","body":"\"<p>The test case you posted is an acceptance test. It boots up a server instance and goes through the full stack. You should really not rely on stubbing and mocking in these kind of tests. They should ensure that the application as a whole works and should treat your application as a black box. To replace tiny bits of code is a recipe for very brittle acceptance tests. Also if you run your tests with a driver that runs Javascript then there is no chance to get the stubbing to work because the server runs in a different process than your tests do.<\\\/p>\\n\\n<p>You should implement the logic for <code>admin_rights?<\\\/code> and then tune your acceptance test-setup that the logic actually returns <code>false<\\\/code>. For example sign in with a normal user, which does not have admin rights. In the end you want your acceptance tests to match closely to the real world scenario.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby><rspec>","commentcount":"0","accepted":"yes"},"14172496":{"id":"14172496","date":"2013-01","score":"5","body":"\"<p>The methods on your controller are instance methods, not class methods. Class methods are defined with <code>self.<\\\/code>. It is hard to trigger a controller action from the console because you miss the whole context. You don't have a session, no request, no response. All these things make it hard to work with code inside controller actions. If you need to trigger your code from outside (console, rack-task, other code). You should extract the code into it's own class.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby><ruby-on-rails-3>","commentcount":"2","accepted":"yes"},"14175335":{"id":"14175335","date":"2013-01","score":"0","body":"\"<p>In order for resque and resque_mailer to work you need to install redis. You can find more about redis here: <a href=\\\"http:\\\/\\\/redis.io\\\/download\\\" rel=\\\"nofollow\\\">http:\\\/\\\/redis.io\\\/download<\\\/a><\\\/p>\\n\\n<p>If you are new to rails, all the external tools and dependencies can be quite overwhelming. If you don't have an application with extreme load you should consider using a simpler job queue like <a href=\\\"https:\\\/\\\/github.com\\\/collectiveidea\\\/delayed_job\\\" rel=\\\"nofollow\\\">https:\\\/\\\/github.com\\\/collectiveidea\\\/delayed_job<\\\/a>. It does not depend on further external services and uses your current database to store the jobs. The only thing you need to do is to keep the workers up.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><asynchronous><redis><actionmailer>","commentcount":"3","accepted":"yes"},"14175447":{"id":"14175447","date":"2013-01","score":"1","body":"\"<p>I think the problem is <code>dependent: :destroy<\\\/code>. If you don't want to destroy accounts with associated users, you should not add the dependent option.<\\\/p>\\n\\n<p>Also this is very risky, since it could accidentally destroy users.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails-3><activerecord><callback>","commentcount":"0","accepted":""},"14175606":{"id":"14175606","date":"2013-01","score":"3","body":"\"<p>The problem is that when you have multiple versions of the same gem installed, the binary you will execute <code>rake<\\\/code> is always the latest version. If your application then depends on an older version of that gem, it can't activate it, since the newer version is already loaded.<\\\/p>\\n\\n<p>There are three solutions:<\\\/p>\\n\\n<ol>\\n<li>use <code>bundle exec rake<\\\/code> this will always use the version from your Gemfile<\\\/li>\\n<li>use bundler binstubs: <code>bundle --binstubs<\\\/code>. This creates a <code>.\\\/bin<\\\/code> folder in your project. You can now access the binaries for the specified gem versions from your Gemfile. You can call rake with <code>.\\\/bin\\\/rake<\\\/code><\\\/li>\\n<li>uninstall the newer version so that the binary points to the one in your Gemfile<\\\/li>\\n<\\\/ol>\\n\\n<p><strong>EDIT:<\\\/strong> As you mentioned you can also create separate gemsets to postpone the problem. There will be times though when you update a gem on a branch and then switch that you will get the error nonetheless.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails-3><gem><rvm>","commentcount":"0","accepted":""},"14175671":{"id":"14175671","date":"2013-01","score":"4","body":"\"<p>I think you got a syntactic problem: <code>@project = Project.find{params[:id]}<\\\/code> should be <code>@project = Project.find(params[:id])<\\\/code>. The ID needs to be passed as an argument. Your code creates a ruby block.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><find>","commentcount":"1","accepted":"yes"},"14178106":{"id":"14178106","date":"2013-01","score":"2","body":"\"<p>You can use <code>text_field_tag<\\\/code> to achieve this. (documentation: <a href=\\\"http:\\\/\\\/api.rubyonrails.org\\\/classes\\\/ActionView\\\/Helpers\\\/FormTagHelper.html#method-i-text_field_tag\\\" rel=\\\"nofollow\\\">http:\\\/\\\/api.rubyonrails.org\\\/classes\\\/ActionView\\\/Helpers\\\/FormTagHelper.html#method-i-text_field_tag<\\\/a>)<\\\/p>\\n\\n<p>A simple example would look like:<\\\/p>\\n\\n<pre><code>text_field_tag 'name[]', @user.first_name\\ntext_field_tag 'name[]', @user.last_name\\n<\\\/code><\\\/pre>\\n\\n<p>This will send both names under the <code>name<\\\/code> parameter. You can access the array with <code>params[:name]<\\\/code> in your controller.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3.2>","commentcount":"0","accepted":""},"14178160":{"id":"14178160","date":"2013-01","score":"2","body":"\"<p>ruby's <code>extend<\\\/code> method does not work with paths. You need to supply the module you want to extend. So you should not store a <code>path<\\\/code> but rather some kind of <code>type<\\\/code> that you can later use to get a reference to the module you want to extend. A little example:<\\\/p>\\n\\n<pre><code>module GuestBehavior\\n  def has_access?\\n    false\\n  end\\nend\\n\\nmodule AdminBehavior\\n  def has_access?\\n    true\\n  end\\nend\\n\\nclass User &lt; ActiveRecord::Base\\n  after_initialize :extend_behavior\\n\\n  def extend_behavior\\n    return if kind.blank?\\n    behavior_module = \\\"#{kind.capitalize}Behavior\\\".constantize\\n    extend behavior_module\\n  end\\nend\\n\\nadmin = User.new(:kind =&gt; 'admin')\\nguest = User.new(:kind =&gt; 'guest')\\n\\nadmin.has_access? # =&gt; true\\nguest.has_access? # =&gt; false\\n<\\\/code><\\\/pre>\\n\\n<p>This is more a though experiment than code I would actually write. It should give you an idea how to achieve your goal.<\\\/p>\\n\\n<p><strong>EDIT:<\\\/strong> If you want to put the modules in different places you can easily get it working. Assuming your using rails, there is the autoloader. When you access an undefined constant the autoloader kicks in and tries to load the file, which defines that constat. The above example could look something like:<\\\/p>\\n\\n<pre><code>app\\\/models\\\/guest_behavior.rb\\napp\\\/models\\\/admin_behavior.rb\\n<\\\/code><\\\/pre>\\n\\n<p>You don't need to put any <code>require<\\\/code> statements in the code. Rails will automatically load the files when you access <code>GuestBehavior<\\\/code> or <code>AdminBehavior<\\\/code>. (thats what the <code>constantize<\\\/code> call does)<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><extend>","commentcount":"6","accepted":"yes"},"14181652":{"id":"14181652","date":"2013-01","score":"4","body":"\"<p>The <code>let<\\\/code> call defines a method in the context your specs will be executed. Your <code>puts<\\\/code> statement however is outside that scope. You need to wrap it inside an <code>it<\\\/code> block.<\\\/p>\\n\\n<pre><code>it 'print debug output' do\\n  puts object.inspect\\nend\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><rspec><tdd><rspec-rails>","commentcount":"0","accepted":"yes"},"14182764":{"id":"14182764","date":"2013-01","score":"3","body":"\"<p>It looks like the problematic file uses the new hash syntax introduced with ruby 1.9. It looks like you are running the app with ruby 1.8 though.<\\\/p>\\n\\n<p>1.) You could install and use ruby 1.9\\n2.) You could change the hash syntax of the file. Rails 3.2.9 should run with ruby 1.8.7 so hopefully this is the only problematic area.<\\\/p>\\n\\n<p>The difference in the hash syntax is:<\\\/p>\\n\\n<p><strong>1.9<\\\/strong><\\\/p>\\n\\n<pre><code>{key: 'value'}\\n<\\\/code><\\\/pre>\\n\\n<p><strong>1.8<\\\/strong><\\\/p>\\n\\n<pre><code>{:key =&gt; 'value'}\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ubuntu><console><terminal><command>","commentcount":"5","accepted":"yes"},"14184602":{"id":"14184602","date":"2013-01","score":"1","body":"\"<p>I guess you don't need to use a path helper at all. If you have the correct route definitions:<\\\/p>\\n\\n<pre><code>resources :proposals do\\n  resources :proposal_replies\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>you should be able to pass <code>[@proposal, @proposal_reply]<\\\/code> to <code>form_for<\\\/code>:<\\\/p>\\n\\n<pre><code>&lt;%= form_for [@proposal, @proposal_reply], :remote =&gt; true do |f| %&gt;\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><forms>","commentcount":"1","accepted":"yes"},"14262995":{"id":"14262995","date":"2013-01","score":"0","body":"\"<p>If there is no restrictions you should use something like <a href=\\\"http:\\\/\\\/www.google.com\\\/analytics\\\/\\\" rel=\\\"nofollow\\\">http:\\\/\\\/www.google.com\\\/analytics\\\/<\\\/a> it is extremely valuable and you can interact with it to customize it to your needs.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3>","commentcount":"3","accepted":""},"15196907":{"id":"15196907","date":"2013-03","score":"0","body":"\"<p>It looks like your <code>PATH<\\\/code> and <code>exec-path<\\\/code> is not configured properly. I wrote up an Emacs package to integrate Emacs with rbenv. This should add the missing configuration: <a href=\\\"http:\\\/\\\/blog.senny.ch\\\/blog\\\/2013\\\/02\\\/11\\\/use-the-right-ruby-with-emacs-and-rbenv\\\/\\\" rel=\\\"nofollow\\\">http:\\\/\\\/blog.senny.ch\\\/blog\\\/2013\\\/02\\\/11\\\/use-the-right-ruby-with-emacs-and-rbenv\\\/<\\\/a><\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<emacs><rbenv>","commentcount":"0","accepted":""},"15436705":{"id":"15436705","date":"2013-03","score":"4","body":"\"<p>I fixed this behavior and with Rails 4.0 you will be able to specify actual HTTP Headers like \\\"User-Agent\\\" and \\\"Content-Type\\\" in integration and functional tests. There no longer a need to specify them as CGI variables.<\\\/p>\\n\\n<p>If you are interested you can have a look at the change: <a href=\\\"https:\\\/\\\/github.com\\\/rails\\\/rails\\\/pull\\\/9700\\\" rel=\\\"nofollow\\\">https:\\\/\\\/github.com\\\/rails\\\/rails\\\/pull\\\/9700<\\\/a><\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><integration-testing>","commentcount":"0","accepted":""}},"comments":{"19643728":{"date":"2013-01","id":"19643728","postid":"14175525","body":"\"In the past days I worked on several rails bugs, which were related to the order of your definitions inside the model. I highly suggest to put the callback definitions always after the associations.\"","score":"0","tags":""},"19557570":{"date":"2013-01","id":"19557570","postid":"14126961","body":"\"Does it work again when you rollback the migration?\"","score":"0","tags":"<ruby-on-rails><activerecord>"},"19557608":{"date":"2013-01","id":"19557608","postid":"14127283","body":"\"please open an issue on https:\\\/\\\/github.com\\\/rails\\\/rails\\\/issues I'll take a look.\"","score":"0","tags":"<ruby-on-rails><actioncontroller>"},"19679894":{"date":"2013-01","id":"19679894","postid":"14179661","body":"\"It's true that the `frist` method in rails `3.2.x` does not actually return the first database record. This is dependent on the database engine you use. This is fixed in `rails\\\/master` and will be available with rails 4. You can read up on the problem here: https:\\\/\\\/github.com\\\/rails\\\/rails\\\/issues\\\/5103 A gist of the solution: first now adds a default order clause to always retrieve the element in the same order.\"","score":"0","tags":"<ruby-on-rails>"},"19513481":{"date":"2012-12","id":"19513481","postid":"14103978","body":"\"I think you should only do this for vendored code. This way you work around the rails autoloader and loose the ability to reload the code in your development environment. Also It's not necessary if you have the right directory structure in your autoloaded folders.\"","score":"0","tags":""},"19499873":{"date":"2012-12","id":"19499873","postid":"14093076","body":"\"What version of rails are you using?\"","score":"0","tags":"<ruby-on-rails><ruby-on-rails-3.2><thin><foreman><rails-api>"},"19548310":{"date":"2013-01","id":"19548310","postid":"14121476","body":"\"You can see this from the stack-trace you posted. A `method_missing` error usually means, that some code is broken and therefore can't be executed. That's way I first inspect the top-most part of the stack-trace. If you work through the stack-trace from top to bottom you'll begin with: \\\/home\\\/mohnish\\\/.rvm\\\/gems\\\/ruby-1.9.3-p194\\\/gems\\\/activesupport-3.0.11\\\/lib\\\/active_support\\\/whiny_nil.rb:48 This is a patch from rails, which is usually not the problem itself. The next line was the draper gem: \\\"\\\/draper\\\/railtie.rb:6\\\" after the colon you can see the line number.\"","score":"0","tags":""},"19548678":{"date":"2013-01","id":"19548678","postid":"13852534","body":"\"could you add the stack trace?\"","score":"0","tags":"<ruby-on-rails><strong-parameters>"},"19637608":{"date":"2013-01","id":"19637608","postid":"14102467","body":"\"you may need to apply the styles to the `input` tag, not the complete form. Try with the following CSS selector: `.roles-form input { ... }`\"","score":"0","tags":""},"19654395":{"date":"2013-01","id":"19654395","postid":"14175335","body":"\"The whole Idea behind a background processing queue, is that it runs in a separate process. Running `rails server` will just boot the process to handle incoming requests. You need to tweak your environment to also start `rake jobs:work`.\"","score":"0","tags":""},"19654436":{"date":"2013-01","id":"19654436","postid":"14178160","body":"\"I updated my answer to show you how you can put the modules in separate files.\"","score":"0","tags":""},"19643801":{"date":"2013-01","id":"19643801","postid":"14174850","body":"\"do you get an error or is just nothing happening? Is the rake task actually being called or is there something fishy happening before?\"","score":"0","tags":"<ruby-on-rails><rake><background-process><resque><ruby-on-rails-2>"},"19532927":{"date":"2013-01","id":"19532927","postid":"14114247","body":"\"could you post the complete stack trace?\"","score":"0","tags":"<ruby-on-rails><activerecord>"},"19533050":{"date":"2013-01","id":"19533050","postid":"14114247","body":"\"thanks! is _show.html.erb:2 the `link_to` call?\"","score":"0","tags":"<ruby-on-rails><activerecord>"},"19533137":{"date":"2013-01","id":"19533137","postid":"14114247","body":"\"the erb you posted, is it `show.html.erb` or `_show.html.erb`? the error happens in the partial.\"","score":"0","tags":"<ruby-on-rails><activerecord>"},"19586475":{"date":"2013-01","id":"19586475","postid":"14143318","body":"\"can you reproduce it in a fresh application? If so, please put one up on github and let me know. I'll take a look. There are situations where the rails autoloader will not be able to return the right result. I think this one should be possible though...\"","score":"1","tags":"<ruby-on-rails><ruby><ruby-on-rails-3><ruby-on-rails-3.2><ruby-1.9.3>"}}}