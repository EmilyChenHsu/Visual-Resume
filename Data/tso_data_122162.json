{"displayName":"Yehuda Katz","id":"122162","avatar":"","creationDate":"2009-06-12 17:13:54","website":"http:\/\/www.tilde.io","reputation":"18461","questionCount":1,"answerCount":53,"commentCount":56,"acceptedCount":43,"nonacceptedCount":10,"activity":{"2011-02":{"commentCount":1,"questionCount":1},"2011-12":{"commentCount":5,"answerCount":10,"nonacceptedCount":5,"acceptedCount":5},"2012-01":{"commentCount":2},"2012-05":{"commentCount":1,"answerCount":1,"acceptedCount":1},"2012-08":{"commentCount":1},"2012-09":{"commentCount":1,"answerCount":3,"acceptedCount":3},"2013-01":{"commentCount":42,"answerCount":31,"acceptedCount":26,"nonacceptedCount":5},"2012-12":{"commentCount":1,"answerCount":3,"acceptedCount":3},"2013-09":{"commentCount":2},"2011-01":{"answerCount":1,"acceptedCount":1},"2011-10":{"answerCount":1,"acceptedCount":1},"2012-06":{"answerCount":1,"acceptedCount":1},"2012-07":{"answerCount":2,"acceptedCount":2}},"tags":{"ruby-on-rails-3":{"activity":{"2011-02":{"commentCount":1},"2011-10":{"answerCount":1,"acceptedCount":1},"2011-12":{"answerCount":5,"nonacceptedCount":2,"acceptedCount":3},"2012-05":{"answerCount":1,"acceptedCount":1},"2012-06":{"answerCount":1,"acceptedCount":1}},"commentCount":1,"relatedTags":{"activerecord":1,"encoding":1,"uuid":1,"routing":1,"ruby-on-rails":7,"ruby-on-rails-3.1":1,"devise":1,"ruby-on-rails-plugins":3,"railtie":1,"ruby":3,"plugins":1,"reflection":1,"methods":1,"controller":1,"synchronization":1},"answerCount":8,"acceptedCount":6,"nonacceptedCount":2},"activerecord":{"activity":{"2011-02":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails-3":1,"encoding":1,"uuid":1}},"encoding":{"activity":{"2011-02":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails-3":1,"activerecord":1,"uuid":1}},"uuid":{"activity":{"2011-02":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails-3":1,"activerecord":1,"encoding":1}},"sproutcore":{"activity":{"2011-12":{"commentCount":1,"answerCount":1,"nonacceptedCount":1}},"commentCount":1,"answerCount":1,"nonacceptedCount":1,"relatedTags":{"sproutcore-2":1}},"ember.js":{"activity":{"2011-12":{"commentCount":1,"answerCount":1,"acceptedCount":1},"2012-01":{"commentCount":1},"2013-01":{"commentCount":9,"answerCount":29,"acceptedCount":25,"nonacceptedCount":4},"2012-07":{"answerCount":1,"acceptedCount":1},"2012-09":{"answerCount":3,"acceptedCount":3},"2012-12":{"answerCount":3,"acceptedCount":3}},"commentCount":11,"relatedTags":{"ember-router":5,"ember-data":11,"ember-old-router":2,"twitter-bootstrap":1,"sproutcore-2":1,"javascript":8,"handlebars.js":4,"mustache":1,"transition":1,"router":1,"attributes":1,"bind":1,"binding":1,"model-view-controller":1},"answerCount":37,"acceptedCount":33,"nonacceptedCount":4},"ruby-on-rails":{"activity":{"2012-05":{"commentCount":1,"answerCount":1,"acceptedCount":1},"2013-01":{"commentCount":1,"answerCount":1,"nonacceptedCount":1},"2011-01":{"answerCount":1,"acceptedCount":1},"2011-12":{"answerCount":5,"nonacceptedCount":2,"acceptedCount":3},"2012-06":{"answerCount":1,"acceptedCount":1}},"commentCount":2,"relatedTags":{"rest":1,"activeresource":1,"ruby":5,"block":1,"ruby-on-rails-3":7,"ruby-on-rails-3.1":1,"devise":1,"ruby-on-rails-plugins":3,"railtie":1,"plugins":1,"reflection":1,"methods":1,"controller":1,"synchronization":1,"gem":1,"ruby-on-rails-2":1,"gemfile":1},"answerCount":9,"acceptedCount":6,"nonacceptedCount":3},"rest":{"activity":{"2012-05":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":1,"activeresource":1}},"activeresource":{"activity":{"2012-05":{"commentCount":1}},"commentCount":1,"relatedTags":{"ruby-on-rails":1,"rest":1}},"ajax":{"activity":{"2012-08":{"commentCount":1}},"commentCount":1,"relatedTags":{"json":1,"asp.net-mvc-4":1,"asp.net-web-api":1,"handlebars.js":1}},"json":{"activity":{"2012-08":{"commentCount":1}},"commentCount":1,"relatedTags":{"ajax":1,"asp.net-mvc-4":1,"asp.net-web-api":1,"handlebars.js":1}},"asp.net-mvc-4":{"activity":{"2012-08":{"commentCount":1}},"commentCount":1,"relatedTags":{"ajax":1,"json":1,"asp.net-web-api":1,"handlebars.js":1}},"asp.net-web-api":{"activity":{"2012-08":{"commentCount":1}},"commentCount":1,"relatedTags":{"ajax":1,"json":1,"asp.net-mvc-4":1,"handlebars.js":1}},"handlebars.js":{"activity":{"2012-08":{"commentCount":1},"2011-12":{"answerCount":1,"nonacceptedCount":1},"2012-07":{"answerCount":1,"acceptedCount":1},"2012-09":{"answerCount":1,"acceptedCount":1},"2013-01":{"answerCount":3,"acceptedCount":2,"nonacceptedCount":1}},"commentCount":1,"relatedTags":{"ajax":1,"json":1,"asp.net-mvc-4":1,"asp.net-web-api":1,"ruby":1,"javascript":1,"html":1,"templating":1,"ember.js":4,"attributes":1,"bind":1},"answerCount":6,"nonacceptedCount":2,"acceptedCount":4},"javascript":{"activity":{"2013-01":{"commentCount":2,"answerCount":6,"acceptedCount":4,"nonacceptedCount":2},"2012-07":{"answerCount":1,"acceptedCount":1},"2012-09":{"answerCount":2,"acceptedCount":2}},"commentCount":2,"relatedTags":{"jquery":1,"closures":1,"mobile-safari":1,"onbeforeunload":1,"html":1,"handlebars.js":1,"templating":1,"ember.js":8,"ember-data":3,"ember-router":1,"model-view-controller":1},"answerCount":9,"acceptedCount":7,"nonacceptedCount":2},"jquery":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"javascript":1,"closures":1}},"closures":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"javascript":1,"jquery":1}},"python":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"module":1,"environment":1}},"module":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"python":1,"environment":1}},"environment":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"python":1,"module":1}},"comments":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"npm":1}},"npm":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"comments":1}},"mobile-safari":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"javascript":1,"onbeforeunload":1}},"onbeforeunload":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"javascript":1,"mobile-safari":1}},"ember-router":{"activity":{"2013-01":{"commentCount":1,"answerCount":4,"acceptedCount":4}},"commentCount":1,"relatedTags":{"ember.js":5,"javascript":1},"answerCount":4,"acceptedCount":4},"android":{"activity":{"2013-01":{"commentCount":4}},"commentCount":4,"relatedTags":{"android-emulator":1,"opengl-es":1,"libgdx":1,"android-activity":1,"acra":1}},"android-emulator":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"android":1}},"opengl-es":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"android":1,"libgdx":1}},"libgdx":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"android":1,"opengl-es":1}},"css":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"css3":1,"css-selectors":1,"scss":1}},"css3":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"css":1,"css-selectors":1,"scss":1}},"css-selectors":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"css":1,"css3":1,"scss":1}},"scss":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"css":1,"css3":1,"css-selectors":1}},"android-activity":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"android":1,"acra":1}},"acra":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"android":1,"android-activity":1}},"ember-data":{"activity":{"2013-01":{"commentCount":4,"answerCount":6,"acceptedCount":5,"nonacceptedCount":1},"2012-12":{"answerCount":1,"acceptedCount":1}},"commentCount":4,"relatedTags":{"ember.js":11,"javascript":3,"binding":1},"answerCount":7,"acceptedCount":6,"nonacceptedCount":1},"ember-old-router":{"activity":{"2013-01":{"commentCount":1,"answerCount":1,"acceptedCount":1}},"commentCount":1,"relatedTags":{"ember.js":2},"answerCount":1,"acceptedCount":1},"regex":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"variables":1,"identifier":1}},"variables":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"regex":1,"identifier":1}},"identifier":{"activity":{"2013-01":{"commentCount":1}},"commentCount":1,"relatedTags":{"regex":1,"variables":1}},"ruby":{"activity":{"2011-01":{"answerCount":1,"acceptedCount":1},"2011-12":{"answerCount":2,"acceptedCount":1,"nonacceptedCount":1},"2012-05":{"answerCount":1,"acceptedCount":1},"2012-06":{"answerCount":1,"acceptedCount":1},"2013-01":{"answerCount":2,"nonacceptedCount":1,"acceptedCount":1}},"answerCount":7,"acceptedCount":5,"relatedTags":{"ruby-on-rails":5,"block":1,"ruby-on-rails-3":3,"ruby-on-rails-plugins":1,"handlebars.js":1,"synchronization":1,"gem":1,"ruby-on-rails-2":1,"gemfile":1,"openstruct":1},"nonacceptedCount":2},"block":{"activity":{"2011-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby":1}},"compiler-construction":{"activity":{"2011-02":{"questionCount":1}},"questionCount":1},"routing":{"activity":{"2011-10":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3":1}},"sproutcore-2":{"activity":{"2011-12":{"answerCount":2,"nonacceptedCount":1,"acceptedCount":1}},"answerCount":2,"nonacceptedCount":1,"relatedTags":{"sproutcore":1,"twitter-bootstrap":1,"ember.js":1},"acceptedCount":1},"ruby-on-rails-3.1":{"activity":{"2011-12":{"answerCount":2,"nonacceptedCount":1,"acceptedCount":1}},"answerCount":2,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1,"devise":1,"formatting":1},"acceptedCount":1},"devise":{"activity":{"2011-12":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1,"ruby-on-rails-3.1":1}},"twitter-bootstrap":{"activity":{"2011-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"sproutcore-2":1,"ember.js":1}},"ruby-on-rails-plugins":{"activity":{"2011-12":{"answerCount":3,"acceptedCount":2,"nonacceptedCount":1}},"answerCount":3,"acceptedCount":2,"relatedTags":{"ruby-on-rails":3,"ruby-on-rails-3":3,"railtie":1,"ruby":1,"plugins":1},"nonacceptedCount":1},"railtie":{"activity":{"2011-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1,"ruby-on-rails-plugins":1}},"plugins":{"activity":{"2011-12":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1,"ruby-on-rails-plugins":1}},"formatting":{"activity":{"2011-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails-3.1":1}},"reflection":{"activity":{"2011-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1,"methods":1,"controller":1}},"methods":{"activity":{"2011-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1,"reflection":1,"controller":1}},"controller":{"activity":{"2011-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby-on-rails-3":1,"reflection":1,"methods":1}},"synchronization":{"activity":{"2012-05":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby":1,"ruby-on-rails-3":1}},"html":{"activity":{"2012-07":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"javascript":1,"handlebars.js":1,"templating":1}},"templating":{"activity":{"2012-07":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"javascript":1,"html":1,"handlebars.js":1}},"mustache":{"activity":{"2012-12":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ember.js":1}},"transition":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ember.js":1,"router":1}},"router":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ember.js":1,"transition":1}},"attributes":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ember.js":1,"bind":1,"handlebars.js":1}},"bind":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"attributes":1,"ember.js":1,"handlebars.js":1}},"gem":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby":1,"ruby-on-rails-2":1,"gemfile":1}},"ruby-on-rails-2":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby":1,"gem":1,"gemfile":1}},"gemfile":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"ruby-on-rails":1,"ruby":1,"gem":1,"ruby-on-rails-2":1}},"openstruct":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ruby":1}},"binding":{"activity":{"2013-01":{"answerCount":1,"acceptedCount":1}},"answerCount":1,"acceptedCount":1,"relatedTags":{"ember.js":1,"ember-data":1}},"model-view-controller":{"activity":{"2013-01":{"answerCount":1,"nonacceptedCount":1}},"answerCount":1,"nonacceptedCount":1,"relatedTags":{"javascript":1,"ember.js":1}}},"questions":{"4943396":{"id":"4943396","date":"2011-02","score":"6","body":"\"<p>I'm looking for a simple, formally defined language that can be used while learning about compiler construction. It should be simple to implement a first pass and then be amenable to further optimization efforts.<\\\/p>\\n\\n<p>Feel free to point me in the direction of lisps, but I'm specifically looking for other options as well.<\\\/p>\\n\"","title":"\"Simple, formally defined language for compiler learning\"","favorite":"3","tags":"<compiler-construction>","commentCount":"1","viewCount":"632","answerCount":"4"}},"answers":{"4702330":{"id":"4702330","date":"2011-01","score":"8","body":"\"<p>Actually it's kind of interesting...<\\\/p>\\n\\n<p>When you use before_create in Rails 3, we take the block or lambda that you give us and convert it into a method. We then invoke the method with the current ActiveRecord object, for backwards compatibility with the old Rails approach.<\\\/p>\\n\\n<p>As a result, the following is equivalent to your snippet:<\\\/p>\\n\\n<pre><code>class User &lt; ActiveRecord::Base\\n  validates_presence_of :login, :email\\n\\n  before_create do\\n    self.name = login.capitalize if name.blank?\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>Because of this behavior, you can call return from the block, and it will behave the same as a return in a normal method (because it <em>is<\\\/em> a normal method).<\\\/p>\\n\\n<p>In general, <code>continue<\\\/code> in a block \\\"returns\\\" from the block.<\\\/p>\\n\\n<p>The specific behavior of normal blocks is:<\\\/p>\\n\\n<ul>\\n<li>When you call <code>continue<\\\/code>, you are skipping the rest of the block, and returning control to the method that invoked the block.<\\\/li>\\n<li>When you call <code>break<\\\/code>, you are skipping the rest of the block, and also immediately returning from the method that invoked the block.<\\\/li>\\n<\\\/ul>\\n\\n<p>You can see that behavior in normal iterators:<\\\/p>\\n\\n<pre><code>value = [1,2,3,4].each do |i|\\n  continue if i == 2\\n  puts i\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>In this case, <code>value<\\\/code> will be <code>[1,2,3,4]<\\\/code>, the normal return value of the <code>each<\\\/code> method, and the output will be:<\\\/p>\\n\\n<pre><code>1\\n3\\n4\\n<\\\/code><\\\/pre>\\n\\n<p>In the case of break:<\\\/p>\\n\\n<pre><code>value = [1,2,3,4].each do |i|\\n  break if i == 2\\n  puts i\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>In this case, the <code>value<\\\/code> will be <code>nil<\\\/code>, since the <code>break<\\\/code> also immediately returned from the <code>each<\\\/code> method. You can force a return with a specific value by using <code>break n<\\\/code>, which will make <code>value<\\\/code> the same as <code>n<\\\/code>. The output in the above case will be:<\\\/p>\\n\\n<pre><code>1\\n<\\\/code><\\\/pre>\\n\\n<p>The important thing is that <code>continue<\\\/code> and <code>break<\\\/code> do not just apply to iterators, although their semantics are designed to behave like their equivalents in C in the case of iterators.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby><block>","commentcount":"1","accepted":"yes"},"7780580":{"id":"7780580","date":"2011-10","score":"8","body":"\"<p>It's actually even easier than that:<\\\/p>\\n\\n<pre><code>session = ActionDispatch::Integration::Session.new(Rails.application)\\nsession.get(path_info)\\nself.body = session.response.body\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails-3><routing>","commentcount":"0","accepted":"yes"},"8453715":{"id":"8453715","date":"2011-12","score":"8","body":"\"<p>It sounds like you want to loop through a list of objects and create links that, when clicked, calls some JavaScript code that has access to the original objects.<\\\/p>\\n\\n<p>At the moment, the easiest way to do that is to bind the template context to a new custom view. You can see everything in action at this JSFiddle: <a href=\\\"http:\\\/\\\/jsfiddle.net\\\/67GQb\\\/\\\">http:\\\/\\\/jsfiddle.net\\\/67GQb\\\/<\\\/a><\\\/p>\\n\\n<p>Template:<\\\/p>\\n\\n<pre><code>{{#each App.people}}\\n    {{#view App.PersonView contentBinding=\\\"this\\\"}}\\n    &lt;a href=\\\"#\\\"&gt;{{content.fullName}}&lt;\\\/a&gt;\\n    {{\\\/view}}\\n{{\\\/each}}\\n<\\\/code><\\\/pre>\\n\\n<p>App Code:<\\\/p>\\n\\n<pre><code>App = SC.Application.create();\\n\\nApp.Person = SC.Object.extend({\\n    fullName: function() {\\n        return this.get('firstName') + ' ' + this.get('lastName');\\n    }.property('firstName', 'lastName') \\n});\\n\\nApp.people = [\\n    App.Person.create({ firstName: \\\"Yehuda\\\", lastName: \\\"Katz\\\" }),\\n    App.Person.create({ firstName: \\\"Tom\\\", lastName: \\\"Dale\\\" })\\n];\\n\\nApp.PersonView = SC.View.extend({\\n    mouseDown: function() {\\n        \\\/\\\/ Note that content is bound to the current template\\n        \\\/\\\/ context in the template above.\\n        var person = this.get('content');\\n        alert(person.get('firstName'));\\n    }\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>That said, we understand that this is a bit cumbersome, and have some ideas for further streamlining the process that we will be working on in the upcoming weeks.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<sproutcore><sproutcore-2>","commentcount":"2","accepted":""},"8453964":{"id":"8453964","date":"2011-12","score":"14","body":"\"<p>You can achieve this by using the :skip option to devise_for:<\\\/p>\\n\\n<pre><code>devise_for :users, :skip =&gt; [:sessions] do\\n    get \\\"\\\/admin\\\" =&gt; \\\"devise\\\/sessions#new\\\", :as =&gt; :new_user_session\\n    post \\\"\\\/admin\\\" =&gt; \\\"devise\\\/sessions#create\\\", :as =&gt; :user_session\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>When I run rake routes after that, I get just:<\\\/p>\\n\\n<pre><code>    new_user_session GET    \\\/admin(.:format)               {:controller=&gt;\\\"devise\\\/sessions\\\", :action=&gt;\\\"new\\\"}\\n        user_session POST   \\\/admin(.:format)               {:controller=&gt;\\\"devise\\\/sessions\\\", :action=&gt;\\\"create\\\"}\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3><ruby-on-rails-3.1><devise>","commentcount":"2","accepted":""},"8453988":{"id":"8453988","date":"2011-12","score":"6","body":"\"<p>You might also try using a ready callback inside your application:<\\\/p>\\n\\n<pre><code>App = SC.Application.create({\\n  ready: function() {\\n    this._super();\\n    $(\\\".topbar\\\").dropdown();\\n  }\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>I think it's a mistake that you have to call this._super() here, and will fix it soon.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<twitter-bootstrap><sproutcore-2><ember.js>","commentcount":"1","accepted":"yes"},"8454819":{"id":"8454819","date":"2011-12","score":"3","body":"\"<p>The problem you're having here is that you can't add new initializers once the initializer process has started.<\\\/p>\\n\\n<p>Here, you're requiring the code that registers the initializers during the initializer process. When you use gems in the Gemfile, the initializers are registered in this code:<\\\/p>\\n\\n<pre><code>if defined?(Bundler)\\n  # If you precompile assets before deploying to production, use this line\\n  Bundler.require(*Rails.groups(:assets =&gt; %w(development test)))\\n  # If you want your assets lazily compiled in production, use this line\\n  # Bundler.require(:default, :assets, Rails.env)\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>This code executes before the initializers begin. In contrast, you are requiring the <code>resources_controller<\\\/code> code in an initializer file, which runs during the initialization process. As a result, it's too late to register new initializers.<\\\/p>\\n\\n<p>What complicates the situation is that the load paths inside <code>vendor\\\/plugins<\\\/code> are also set up during the initialization process, so you won't be able to require <code>resources_controller<\\\/code> in <code>application.rb<\\\/code>.<\\\/p>\\n\\n<p>The easiest solution to your problem would be to use the <code>:path<\\\/code> feature in bundler. After installing the plugin, add this line to your Gemfile:<\\\/p>\\n\\n<pre><code>gem 'resources_controller', :path =&gt; \\\"vendor\\\/plugins\\\/resources_controller\\\"\\n<\\\/code><\\\/pre>\\n\\n<p>You can then remove the require line from your initializer, and bundler will recognize that the plugin is a locally checked out gem and do what it would do if you used git.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3><ruby-on-rails-plugins><railtie>","commentcount":"1","accepted":"yes"},"8454839":{"id":"8454839","date":"2011-12","score":"5","body":"\"<p>I recommend that people create a new settings namespace for their settings in their Railtie:<\\\/p>\\n\\n<pre><code>module MyPlugin\\n  class Railtie &lt; Rails::Railtie\\n    config.my_plugin = ActiveSupport::OrderedHash.new\\n\\n    config.my_plugin.some_default = true\\n    config.my_plugin.some_other_default = false\\n\\n    initializer \\\"my_plugin.initialize\\\" do |app|\\n      app.config.my_plugin # the settings, possibly augmented by the user\\n    end\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>Then, the user can set your plugin's config or override defaults in their Application class. This is the pattern Rails uses in our internal Railties.<\\\/p>\\n\\n<p>Like Paul said, you could make it even easier by creating a generator that dumps an initializer with all the possible config settings commented out for their use.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby><ruby-on-rails-3><ruby-on-rails-plugins>","commentcount":"2","accepted":"yes"},"8454854":{"id":"8454854","date":"2011-12","score":"8","body":"\"<p>You should do this via an on_load hook:<\\\/p>\\n\\n<pre><code>ActiveSupport.on_load(:action_controller) do\\n  include Foo\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>This will defer including the module until ActionController::Base would be loaded normally. This will avoid <code>AC::Base<\\\/code> from being prematurely loaded, which can save some load time in many Rake tasks and when loading the console.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><plugins><ruby-on-rails-3><ruby-on-rails-plugins>","commentcount":"0","accepted":""},"8454879":{"id":"8454879","date":"2011-12","score":"2","body":"\"<p>The easiest solution to this problem would be to register the rake task using the Rails::Railtie API. In <code>lib\\\/mplug.rb<\\\/code>, define your <code>Railtie<\\\/code>:<\\\/p>\\n\\n<pre><code>module Mplug\\n  class Railtie &lt; ::Rails::Railtie\\n    rake_tasks do\\n      load \\\"mplug\\\/rails.rake\\\"\\n    end\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>Then, in <code>lib\\\/mplug\\\/rails.rake<\\\/code>:<\\\/p>\\n\\n<pre><code>namespace :mplug do\\n  task :create do\\n    Mplug::Indexer.new\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>Then, make sure your plugin is defined in your <code>Gemfile<\\\/code>. If your plugin is in <code>vendor\\\/plugins<\\\/code>, add this line to your <code>Gemfile<\\\/code>:<\\\/p>\\n\\n<pre><code>gem \\\"mplug\\\", :path =&gt; \\\"vendor\\\/plugins\\\/mplug\\\"\\n<\\\/code><\\\/pre>\\n\\n<p>If you push the plugin to a git repo, use <code>:git<\\\/code>.<\\\/p>\\n\\n<p>Now, <code>rake mplug:create<\\\/code> will be available! If you want it to show up in <code>rake -T<\\\/code>, make sure you add a description:<\\\/p>\\n\\n<pre><code>namespace :mplug do\\n  desc \\\"creating an mplug\\\"\\n  task :create do\\n    Mplug::Indexer.new\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"","commentcount":"0","accepted":""},"8546942":{"id":"8546942","date":"2011-12","score":"2","body":"\"<p>Have you considered moving this logic into a partial? Also, you should be using the new <code>#presence<\\\/code> method.<\\\/p>\\n\\n<p>First, the method:<\\\/p>\\n\\n<pre><code>def site_address(site)\\n  address = [\\n    site.address1.presence,\\n    site.address2.presence\\n  ].compact\\n\\n  location = \\\"\\\"\\n  location &lt;&lt; site.city &lt;&lt; \\\", \\\" if site.city.present?\\n  location &lt;&lt; site.state.statecode if site.state.present?\\n  location &lt;&lt; site.zipcode if site.zipcode.present?\\n\\n  render :partial =&gt; \\\"shared\\\/site_address\\\",\\n         :locals =&gt; { :address_lines =&gt; address, :location =&gt; location }\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>Then, the partial:<\\\/p>\\n\\n<pre><code>&lt;address&gt;\\n  &lt;% address_lines.each do |line| %&gt;\\n    &lt;%= line %&gt;&lt;br&gt;\\n  &lt;% end %&gt;\\n  &lt;%= location %&gt;\\n&lt;\\\/address&gt;\\n<\\\/code><\\\/pre>\\n\\n<p>In general, using <code>html_safe<\\\/code> in a helper is a hint that you might be going overboard with HTML logic in your helper, and that it might a good idea to fall back on the template engine, which lets you more easily mix static and dynamic content with good default XSS-safe semantics.<\\\/p>\\n\\n<p><strong>Note<\\\/strong>: If <code>address1<\\\/code>, <code>address2<\\\/code>, etc. are actually <code>nil<\\\/code>, and not possibly an empty String (I suspect this is true about site.state, at least), you don't need to use <code>present<\\\/code> at all. Just say <code>if site.state<\\\/code> and call it a day. The <code>present<\\\/code> and <code>presence<\\\/code> methods simply treat empty values as if they were <code>nil<\\\/code> for the purpose of conditionals.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<formatting><ruby-on-rails-3.1>","commentcount":"1","accepted":"yes"},"8565483":{"id":"8565483","date":"2011-12","score":"16","body":"\"<p>Since you're not a Ruby person, here are the most reliable steps for getting a stock OSX environment set up with rake pipeline:<\\\/p>\\n\\n<h3>Step 1: Install bundler<\\\/h3>\\n\\n<pre><code># on OSX, using built-in Ruby\\n$ sudo gem install bundler --pre\\n<\\\/code><\\\/pre>\\n\\n<h3>Step 2: Create a Gemfile<\\\/h3>\\n\\n<pre><code># inside your app directory\\n$ bundle init\\n\\n# will create a file named Gemfile in the root\\n<\\\/code><\\\/pre>\\n\\n<h3>Step 3: Add rake-pipeline to the Gemfile<\\\/h3>\\n\\n<pre><code># inside the Gemfile\\ngem \\\"rake-pipeline-web-filters\\\"\\n<\\\/code><\\\/pre>\\n\\n<h3>Step 4: Install your gems<\\\/h3>\\n\\n<pre><code>$ bundle install --binstubs\\n<\\\/code><\\\/pre>\\n\\n<h3>Step 5: Set up Assetfile<\\\/h3>\\n\\n<p>However you were already doing it...<\\\/p>\\n\\n<h3>Step 6: Run Rake::Pipeline<\\\/h3>\\n\\n<pre><code># to run the preview server\\n$ bin\\\/rakep\\n\\n# to build your assets\\n$ bin\\\/rakep build\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby><handlebars.js>","commentcount":"1","accepted":""},"8687076":{"id":"8687076","date":"2011-12","score":"41","body":"\"<p>The easiest way to get a list of controller classes is:<\\\/p>\\n\\n<pre><code>ApplicationController.descendants\\n<\\\/code><\\\/pre>\\n\\n<p>However, as classes are loaded lazily, you will need to eager load all your classes before you do this. Keep in mind that this method will take time, and it will slow down your boot:<\\\/p>\\n\\n<pre><code>Rails.application.eager_load!\\n<\\\/code><\\\/pre>\\n\\n<p>To get all the actions in a controller, use <code>action_methods<\\\/code><\\\/p>\\n\\n<pre><code>PostsController.action_methods\\n<\\\/code><\\\/pre>\\n\\n<p>This will return a <code>Set<\\\/code> containing a list of all of the methods in your controller that are \\\"actions\\\" (using the same logic Rails uses to decide whether a method is a valid action to route to).<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby-on-rails-3><reflection><methods><controller>","commentcount":"1","accepted":"yes"},"10477064":{"id":"10477064","date":"2012-05","score":"6","body":"\"<p>It's possible (and desirable) to run Rails in a multi-threaded mode even in MRI. This can be accomplished by changing a line in <code>production.rb<\\\/code>.<\\\/p>\\n\\n<pre><code>config.threadsafe!\\n<\\\/code><\\\/pre>\\n\\n<p>In MRI, two threads cannot run code simultaneously, but a context switch can happen at any time. In Rubinius and JRuby, threads can run code simultaneously.<\\\/p>\\n\\n<p>Let's look at the code you showed:<\\\/p>\\n\\n<pre><code>class Something\\n  def self.objects\\n    @objects ||= begin\\n      # some logic that builds an array, which is ultimately stored in @objects\\n    end\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>The <code>||=<\\\/code> code gets expanded to something like:<\\\/p>\\n\\n<pre><code>class Something\\n  def self.objects\\n    @objects || (@objects = begin\\n      # some logic that builds an array, which is ultimately stored in @objects\\n    end)\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\\n<p>This means that there are actually two steps to the process:<\\\/p>\\n\\n<ol>\\n<li>look up <code>@objects<\\\/code><\\\/li>\\n<li>If <code>@objects<\\\/code> is falsy, set <code>@objects<\\\/code> to the results of the <code>begin\\\/end<\\\/code> expression<\\\/li>\\n<\\\/ol>\\n\\n<p>It may be possible for the context to switch between these steps. It is certainly possible for the context to switch in the middle of step 2. This means that you may end up running the block multiple times instead of once. In MRI, this may be acceptable, but it's perfectly straight forward to lock a mutex around the expression, so do it.<\\\/p>\\n\\n<pre><code>class Something\\n  MUTEX = Mutex.new\\n\\n  def self.objects\\n    MUTEX.synchronize do\\n      @objects ||= begin\\n        # some logic that builds an array, which is ultimately stored in @objects\\n      end\\n    end\\n  end\\nend\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby><ruby-on-rails-3><synchronization>","commentcount":"2","accepted":"yes"},"11217954":{"id":"11217954","date":"2012-06","score":"6","body":"\"<p>I'd probably use something like Diff::LCS:<\\\/p>\\n\\n<pre><code>&gt;&gt; require \\\"diff\\\/lcs\\\"\\n&gt;&gt; seq1 = \\\"lorem ipsum dolor sit amet consequtor\\\".split(\\\" \\\")\\n&gt;&gt; seq2 = \\\"lorem ipsum dolor amet sit consequtor\\\".split(\\\" \\\")\\n1.9.3-p194 :010 &gt; Diff::LCS.diff(seq1, seq2).length\\n =&gt; 2\\n<\\\/code><\\\/pre>\\n\\n<p>It uses the <a href=\\\"http:\\\/\\\/en.wikipedia.org\\\/wiki\\\/Longest_common_subsequence_problem\\\">longest common subsequence<\\\/a> algorithm (the method for using LCS to get a diff is described on <a href=\\\"http:\\\/\\\/en.wikipedia.org\\\/wiki\\\/Longest_common_subsequence_problem#Print_the_diff\\\">the wiki page<\\\/a>).<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby><ruby-on-rails-3>","commentcount":"1","accepted":"yes"},"11533197":{"id":"11533197","date":"2012-07","score":"10","body":"\"<p>The main reason why we've pushed back on this change is that it makes it impossible to override properties that are defined on base classes as computed properties. For example, in <code>Ember.View<\\\/code>, the <code>template<\\\/code> property is a computed property:<\\\/p>\\n\\n<pre><code>template: Ember.computed(function(key, value) {\\n  if (value !== undefined) { return value; }\\n\\n  var templateName = get(this, 'templateName'),\\n      template = this.templateForName(templateName, 'template');\\n\\n  return template || get(this, 'defaultTemplate');\\n}).property('templateName').cacheable(),\\n<\\\/code><\\\/pre>\\n\\n<p>When creating a subclass of <code>Ember.View<\\\/code>, you may want to override this definition with an explicit template function:<\\\/p>\\n\\n<pre><code>Ember.View.create({ template: Ember.Handlebars.compile('...') });\\n<\\\/code><\\\/pre>\\n\\n<p>If the computed property doesn't handle the setter case, this attempt to override the computed property would be a silent failure.<\\\/p>\\n\\n<p>If we made this change, it also introduces other questions about whether observers should trigger for properties passed into the <code>create<\\\/code> method. Both are possible to implement, and there are strong arguments for both approaches.<\\\/p>\\n\\n<p>In the run-up to 1.0, it seems reasonable to consider an approach that would:<\\\/p>\\n\\n<ul>\\n<li>change <code>create<\\\/code> to use <code>setProperties<\\\/code> semantics<\\\/li>\\n<li>add a new API (<code>override<\\\/code> or <code>createWithOverride<\\\/code>) that would retain the existing semantics, in case you explicitly wanted to override existing computed properties<\\\/li>\\n<li>suppress observers for properties set due to <code>create<\\\/code> (or decide not to)<\\\/li>\\n<li>find a way to detect and warn about attempts to use the <code>create<\\\/code> API with computed properties that do not implement setters.<\\\/li>\\n<\\\/ul>\\n\\n<p>I would need to discuss it more, and consider the implications to existing apps, but it is definitely something worth considering, as it is definitely a pretty big gotcha for new developers. The fact that we needed to change the behavior for <code>ember-data<\\\/code> is a pretty good clue that something isn't quite right.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"2","accepted":"yes"},"11615370":{"id":"11615370","date":"2012-07","score":"63","body":"\"<p>Handlebars partials take a second parameter which becomes the context for the partial:<\\\/p>\\n\\n<pre><code>{{&gt; person this}}\\n<\\\/code><\\\/pre>\\n\\n<p>You can see the test for this scenario: <a href=\\\"https:\\\/\\\/github.com\\\/wycats\\\/handlebars.js\\\/blob\\\/ce74c36118ffed1779889d97e6a2a1028ae61510\\\/spec\\\/qunit_spec.js#L456-L462\\\">https:\\\/\\\/github.com\\\/wycats\\\/handlebars.js\\\/blob\\\/ce74c36118ffed1779889d97e6a2a1028ae61510\\\/spec\\\/qunit_spec.js#L456-L462<\\\/a><\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<javascript><html><handlebars.js><templating>","commentcount":"6","accepted":"yes"},"12336225":{"id":"12336225","date":"2012-09","score":"1","body":"\"<p>The <code>connectOutlet<\\\/code> method has a <code>controller<\\\/code> option you can pass:<\\\/p>\\n\\n<pre><code>postsController.connectOutlet('createPost', { controller: 'application' })\\n<\\\/code><\\\/pre>\\n\\n<p>That said, we are in the process of improving the router API in general to put a greater focus on templates and making the View class optional (you'll only need one if you have events to handle).<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<javascript><ember.js>","commentcount":"0","accepted":"yes"},"12336249":{"id":"12336249","date":"2012-09","score":"4","body":false,"title":"\"\"","favorite":null,"tags":"<ember.js><handlebars.js>","commentcount":"1","accepted":"yes"},"12336266":{"id":"12336266","date":"2012-09","score":"1","body":"\"<p>The <code>Ember.Map<\\\/code> object that comes with Ember is meant for high-performance, mostly internal use, so it doesn't implement Observable, Ember.Array or Ember.Enumerable (requirements for displaying an auto-updating object).<\\\/p>\\n\\n<p>It would be pretty straight-forward to implement a <code>Map<\\\/code> that supported auto-updating. Can you explain your use-case a bit?<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<javascript><ember.js>","commentcount":"0","accepted":"yes"},"14089069":{"id":"14089069","date":"2012-12","score":"5","body":"\"<p>You can do this via a filter:<\\\/p>\\n\\n<pre><code>App.Post.filter(function(post) { return post.get('isLoaded'); });\\n<\\\/code><\\\/pre>\\n\\n<p>This will keep an up-to-date Array of only the <code>App.Post<\\\/code> records that have been loaded. When new records are loaded, it will automatically update (and update any DOM that is bound to it).<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><ember-data>","commentcount":"0","accepted":"yes"},"14089090":{"id":"14089090","date":"2012-12","score":"26","body":"\"<p>The goal of the container is to provide a more general-purpose mechanism for describing module dependencies than the ad-hoc approach we had been using.<\\\/p>\\n\\n<p>For example, imagine you want to find the controller for the <code>post<\\\/code> route. The default Ember rules are that we would look it up as <code>App.PostController<\\\/code>. Before the container, we would just hardcode those rules wherever we needed to do the lookup (using <code>classify<\\\/code> and friends).<\\\/p>\\n\\n<p>The container provides a way for us to define those rules in a single place. As a bonus, the rules can be overridden for applications that want a different convention.<\\\/p>\\n\\n<p>So instead of <code>Ember.get(namespace, Ember.String.classify(name) + 'Controller')<\\\/code> internally, we now do <code>container.lookup('controller:' + name)<\\\/code>.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"1","accepted":"yes"},"14089151":{"id":"14089151","date":"2012-12","score":"25","body":"\"<p>It is now possible to create bound Handlebars helpers using a public Ember API.<\\\/p>\\n\\n<pre><code>Handlebars.registerBoundHelper('timestamp', function(date, options) {\\n  var formatter        = options.hash['format'] ? options.hash['format'] : 'hh:mm a MM-DD-YYYY';\\n  var parsed_date      = moment(date);\\n  var formatted_date   = parsed_date.format(formatter);\\n\\n  return new Handlebars.SafeString(\\\"&lt;time datetime=\\\" + date +\\\"&gt;\\\" + formatted_date + \\\"&lt;\\\/time&gt;\\\");\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>The parameter passed to the helper will have already been resolved, and the helper will be called again whenever the path changes.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><mustache>","commentcount":"4","accepted":"yes"},"14183507":{"id":"14183507","date":"2013-01","score":"42","body":"\"<p>I <a href=\\\"https:\\\/\\\/github.com\\\/emberjs\\\/data\\\/commit\\\/278a0b863f0b1b2494fe2319ac12be6167195f6b\\\">just pushed<\\\/a> <code>record.reload()<\\\/code> to Ember Data. This will ask the adapter to reload the data from the server and update the record with the new data.<\\\/p>\\n\\n<h3>Constraints:<\\\/h3>\\n\\n<ul>\\n<li>You can only call <code>reload()<\\\/code> on a record if it has completed loading and has not yet been modified. Otherwise, the returned data will conflict with the modified data. In the future, we will add support for a merge hook to address these sorts of conflicts, which will allow <code>reload()<\\\/code> in more record states.<\\\/li>\\n<li>If you call <code>reload()<\\\/code> and change or save the record before the adapter returns the new data, you will get an error for the same reason. The error currently looks something like <code>Attempted to handle event 'reloadRecord' on &lt;Person:ember263:1&gt; while in state rootState.loaded.updated.uncommitted.<\\\/code>. Basically, this means that your record was in the \\\"updated but uncommitted\\\" state, and you aren't allowed to call <code>reload()<\\\/code> outside of the \\\"loading and unmodified\\\" state.<\\\/li>\\n<\\\/ul>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><ember-data>","commentcount":"4","accepted":"yes"},"14273004":{"id":"14273004","date":"2013-01","score":"9","body":"\"<p>For Ember 1.0, templates should be defined in <code>index.html<\\\/code> or in separate files that are provided to your application via a build tool.<\\\/p>\\n\\n<p>Some examples:<\\\/p>\\n\\n<ul>\\n<li><a href=\\\"https:\\\/\\\/github.com\\\/dgeb\\\/grunt-ember-templates\\\">For Grunt<\\\/a><\\\/li>\\n<li><a href=\\\"https:\\\/\\\/npmjs.org\\\/package\\\/ember-precompiler-brunch\\\">For Brunch<\\\/a><\\\/li>\\n<li><a href=\\\"https:\\\/\\\/github.com\\\/emberjs\\\/ember-rails\\\">For the Rails Asset Pipeline<\\\/a><\\\/li>\\n<li><a href=\\\"https:\\\/\\\/github.com\\\/radiumsoftware\\\/iridium-ember\\\">For Iridium<\\\/a><\\\/li>\\n<li><a href=\\\"https:\\\/\\\/github.com\\\/tchak\\\/barber\\\/blob\\\/master\\\/README.md\\\">A Standalone Precompiler<\\\/a><\\\/li>\\n<\\\/ul>\\n\\n<p>If you really, really want to put your template in JavaScript, you can put this in your application template:<\\\/p>\\n\\n<pre><code>&lt;script type=\\\"text\\\/x-handlebars\\\"&gt;\\n  {{view App.MyView}}\\n&lt;\\\/script&gt;\\n<\\\/code><\\\/pre>\\n\\n<p>And then define your view:<\\\/p>\\n\\n<pre><code>App.MyView = Ember.View.extend({\\n  template: Ember.Handlebars.compile(\\\"Whatever you want here\\\")\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>That said, the happy path in Ember is to use external templates for each of your routes, either in your HTML when you're getting started, or using a build step so you can keep them out of your index.html.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"4","accepted":"yes"},"14273175":{"id":"14273175","date":"2013-01","score":"5","body":"\"<p>I think what you want is the <code>template<\\\/code> helper, which renders templates in the current context.<\\\/p>\\n\\n<p>The <code>render<\\\/code> helpers renders a template with its associated controller. So for example, if you did:<\\\/p>\\n\\n<pre><code>{{render \\\"sidebar\\\"}}\\n<\\\/code><\\\/pre>\\n\\n<p>That would render the <code>sidebar<\\\/code> template using <code>App.SidebarController<\\\/code>.<\\\/p>\\n\\n<p>If you did:<\\\/p>\\n\\n<pre><code>{{render \\\"post\\\" post}}\\n<\\\/code><\\\/pre>\\n\\n<p>That would render the <code>post<\\\/code> template using <code>App.PostController<\\\/code>, with the current <code>post<\\\/code> as the controller's model.<\\\/p>\\n\\n<p>It was a bug that these sub-controllers don't bubble up events, but I don't think that you wanted this behavior in the first place. (<strong>UPDATE<\\\/strong> This bug is now fixed <a href=\\\"https:\\\/\\\/github.com\\\/emberjs\\\/ember.js\\\/commit\\\/ee86cdd68f801444efb11bbe3e06c0ed0e917c2f\\\" rel=\\\"nofollow\\\">on master<\\\/a>)<\\\/p>\\n\\n<p>We are planning on making the naming and usages much clearer in the coming weeks.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"9","accepted":"yes"},"14273397":{"id":"14273397","date":"2013-01","score":"3","body":"\"<p>You're actually doing a <strong>lot<\\\/strong> more work than you need to here.<\\\/p>\\n\\n<p>Here's all the code that you need to make your example work.<\\\/p>\\n\\n<p>Template:<\\\/p>\\n\\n<pre><code>&lt;script type=\\\"text\\\/x-handlebars\\\" data-template-name=\\\"index\\\"&gt;\\n  &lt;div class=\\\"patient-view extended\\\"&gt;\\n    &lt;p&gt;Name: {{name}}&lt;\\\/p&gt;\\n  &lt;\\\/div&gt;\\n&lt;\\\/script&gt;\\n<\\\/code><\\\/pre>\\n\\n<p>App:<\\\/p>\\n\\n<pre><code>window.App = Em.Application.create();\\n\\nApp.Patient = Em.Object.extend({\\n  name: null\\n});\\n\\nApp.IndexRoute = Em.Route.extend({\\n  model: function() {\\n    return App.Patient.create({\\n      name: \\\"Bert\\\"\\n    });\\n  }\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>The working fiddle is at: <a href=\\\"http:\\\/\\\/jsfiddle.net\\\/NXA2S\\\/23\\\/\\\" rel=\\\"nofollow\\\">http:\\\/\\\/jsfiddle.net\\\/NXA2S\\\/23\\\/<\\\/a><\\\/p>\\n\\n<p>Let me explain it a bit:<\\\/p>\\n\\n<ul>\\n<li>When you go to <code>\\\/<\\\/code>, you are entering the automatic <code>index<\\\/code> route. All you need to do to show something on the screen for that route is to implement an <code>index<\\\/code> template. The easiest way to do that when you're getting up and running is to put your template in your <code>index.html<\\\/code>. Later, you will probably want to use build tools (see <a href=\\\"http:\\\/\\\/stackoverflow.com\\\/questions\\\/14271651\\\/define-application-template-in-ember-view-in-the-most-recent-ember-js-build\\\/14273004#14273004\\\">my answer here<\\\/a> for more information).<\\\/li>\\n<li>You can control what model is displayed in a route's template by overriding the <code>model<\\\/code> hook in its route handler. In the case of <code>index<\\\/code>, the route handler is <code>App.IndexRoute<\\\/code>. In this case, the model is a brand new <code>App.Patient<\\\/code>.<\\\/li>\\n<\\\/ul>\\n\\n<p>You will probably want to implement controllers and events. You can learn more about the router on <a href=\\\"http:\\\/\\\/emberjs.com\\\/guides\\\/routing\\\/\\\" rel=\\\"nofollow\\\">the Ember.js website<\\\/a><\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<javascript><ember.js>","commentcount":"2","accepted":"yes"},"14289055":{"id":"14289055","date":"2013-01","score":"1","body":"\"<p>This was actually a bug in Ember. Because <code>index<\\\/code> is implicit, you should not need to explicitly provide it.<\\\/p>\\n\\n<p>The bug was fixed on <a href=\\\"https:\\\/\\\/github.com\\\/emberjs\\\/ember.js\\\/commit\\\/2426cb93ef9844d96219f399577e32fd7b667597\\\" rel=\\\"nofollow\\\">master<\\\/a>.<\\\/p>\\n\\n<p>If you want to go to a route that has child routes, you should <code>transitionTo<\\\/code> the specified name of the route, and Ember will automatically add the <code>index<\\\/code> for you.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><transition><router>","commentcount":"0","accepted":"yes"},"14290785":{"id":"14290785","date":"2013-01","score":"16","body":"\"<p>In general, you can observe regular JavaScript objects just fine. You just need to use <code>Ember.get<\\\/code> and <code>Ember.set<\\\/code> to modify them:<\\\/p>\\n\\n<pre><code>var pojo = {};\\n\\nvar MyObject = Ember.Object.extend({\\n  bigEyeballs: function() {\\n    var O_O = this.get('pojo.O_O');\\n    if (O_O) { return O_O.toUpperCase(); }\\n  }.property('pojo.O_O')\\n});\\n\\nvar obj = MyObject.create({ pojo: pojo });\\nconsole.log(obj.get('bigEyeballs'));\\n\\nEmber.set(pojo, 'O_O', \\\"wat\\\");\\nconsole.log(obj.get('bigEyeballs'));\\n<\\\/code><\\\/pre>\\n\\n<p>You can see this working in <a href=\\\"http:\\\/\\\/jsbin.com\\\/uqiyot\\\/2\\\/edit\\\">this JSBin<\\\/a>.<\\\/p>\\n\\n<p>Local Storage is a bit of a different matter, as it's not <strong>really<\\\/strong> a normal JavaScript object. You can create a small Ember wrapper around local storage, and use that for observation:<\\\/p>\\n\\n<pre><code>var LocalStorage = Ember.Object.extend({\\n  unknownProperty: function(key) {\\n    return localStorage[key];\\n  },\\n\\n  setUnknownProperty: function(key, value) {\\n    localStorage[key] = value;\\n    this.notifyPropertyChange(key);\\n    return value;\\n  }\\n});\\n\\nvar storage = new LocalStorage();\\n\\nvar MyObject = Ember.Object.extend({\\n  bigEyeballs: function() {\\n    var O_O = this.get('pojo.O_O');\\n    if (O_O) { return O_O.toUpperCase(); }\\n  }.property('pojo.O_O')\\n});\\n\\nvar obj = MyObject.create({ pojo: storage });\\n\\nconsole.log(obj.get('bigEyeballs'));\\n\\nEmber.set(storage, 'O_O', \\\"wat\\\");\\nconsole.log(obj.get('bigEyeballs'));\\n<\\\/code><\\\/pre>\\n\\n<p>You can see this live on <a href=\\\"http:\\\/\\\/jsbin.com\\\/uqiyot\\\/3\\\/edit\\\">JSBin<\\\/a>.<\\\/p>\\n\\n<p>In both cases, the important thing is that you will have to use Ember-aware setting and getting in order to observe these properties.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"0","accepted":"yes"},"14290847":{"id":"14290847","date":"2013-01","score":"1","body":"\"<p>This is currently a limitation of Ember Data. Specifically, <strong>at present<\\\/strong>, bidirectional links are not set up on data returned from the adapter at load time.<\\\/p>\\n\\n<p>This is a very short-term limitation that we expect to have fixed soon.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<javascript><ember.js><ember-data>","commentcount":"3","accepted":"yes"},"14299970":{"id":"14299970","date":"2013-01","score":"5","body":"\"<p>This should actually \\\"just work\\\".<\\\/p>\\n\\n<p>On exiting a route, <a href=\\\"https:\\\/\\\/github.com\\\/emberjs\\\/ember.js\\\/blob\\\/master\\\/packages\\\/ember-routing\\\/lib\\\/system\\\/route.js#L7-L9\\\">Ember tears down the view<\\\/a>. However, <code>exit<\\\/code> is no longer a public hook, and because you are not calling <code>super<\\\/code>, your incorrect guess about how to tear down the view is clobbering the built-in behavior!<\\\/p>\\n\\n<p>If you remove the <code>exit<\\\/code> call, everything should work as you expect.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><ember-old-router>","commentcount":"3","accepted":"yes"},"14300850":{"id":"14300850","date":"2013-01","score":"7","body":"\"<p>I am assuming that the responses contain the IDs only, and that you are trying to extract them.<\\\/p>\\n\\n<p>You will want to subclass <code>DS.JSONSerializer<\\\/code>, which supplies the basic behavior for dealing with JSON payloads. In particular, you will want to override the <code>extractHasMany<\\\/code> hook:<\\\/p>\\n\\n<pre><code>\\\/\\\/ elsewhere in your file\\nfunction singularize(key) {\\n  \\\/\\\/ remove the trailing `s`. You might want to store a hash of\\n  \\\/\\\/ plural-&gt;singular if you deal with names that don't follow\\n  \\\/\\\/ this pattern\\n  return key.substr(0, key.length - 1);\\n}\\n\\nDS.JSONSerializer.extend({\\n  extractHasMany: function(type, hash, key) {\\n    return hash[key][singularize(key)].id;\\n  }\\n})\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<javascript><ember.js><ember-data>","commentcount":"3","accepted":"yes"},"14300871":{"id":"14300871","date":"2013-01","score":"2","body":"\"<p>Before <a href=\\\"https:\\\/\\\/github.com\\\/emberjs\\\/data\\\/commit\\\/bc755f9227d9a71f33e4dc8b675409de66fe8fd2\\\" rel=\\\"nofollow\\\">bc755f9<\\\/a>, you needed to supply your fixture keys as Strings, which is how Ember Data stores them internally.<\\\/p>\\n\\n<p>Now, you can use either numbers or strings as fixture IDs, and everything will work as expected.<\\\/p>\\n\\n<p>Separately, you should always use the debug build of Ember.js in development, which provides much better error messages should something go wrong. As of <a href=\\\"https:\\\/\\\/github.com\\\/emberjs\\\/ember.js\\\/commit\\\/ea6922f82b7592707a222c1e83cbcda728d1e6ca\\\" rel=\\\"nofollow\\\">ea6922f<\\\/a>, the production build of Ember.js will warn you if you are running it in <code>localhost<\\\/code> or <code>127.0.0.1<\\\/code>.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><ember-data>","commentcount":"0","accepted":"yes"},"14301065":{"id":"14301065","date":"2013-01","score":"20","body":"\"<p>Because you have animations you want to run when the notifications change, you will want to create a subclass of <code>Ember.View<\\\/code> (a \\\"widget\\\"):<\\\/p>\\n\\n<pre><code>App.NotificationView = Ember.View.extend({\\n  notificationDidChange: function() {\\n    if (this.get('notification') !== null) {\\n      this.$().slideDown();\\n    }\\n  }.observes('notification'),\\n\\n  close: function() {\\n    this.$().slideUp().then(function() {\\n      self.set('notification', null);\\n    });\\n  },\\n\\n  template: Ember.Handlebars.compile(\\n    \\\"&lt;button {{action 'close' target='view'}}&gt;Close&lt;\\\/button&gt;\\\" +\\n    \\\"{{view.notification}}\\\"\\n  )\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>This widget will expect to have a <code>notification<\\\/code> property. You can set it from your <code>application<\\\/code> template:<\\\/p>\\n\\n<pre><code>{{view App.NotificationView id=\\\"notifications\\\" notificationBinding=\\\"notification\\\"}}\\n<\\\/code><\\\/pre>\\n\\n<p>This will gets its <code>notification<\\\/code> property from the <code>ApplicationController<\\\/code>, so we will create a couple of methods on the controller that other controllers can use to send notifications:<\\\/p>\\n\\n<pre><code>App.ApplicationController = Ember.Controller.extend({\\n  closeNotification: function() {\\n    this.set('notification', null);\\n  },\\n\\n  notify: function(notification) {\\n    this.set('notification', notification);\\n  }\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>Now, let's say we want to create a notification every time we enter the <code>dashboard<\\\/code> route:<\\\/p>\\n\\n<pre><code>App.DashboardRoute = Ember.Route.extend({\\n  setupController: function() {\\n    var notification = \\\"You have entered the dashboard\\\";\\n    this.controllerFor('application').notify(notification);\\n  }\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>The view itself manages the DOM, while the application controller manages the <code>notification<\\\/code> property. You can see it all working <a href=\\\"http:\\\/\\\/jsbin.com\\\/uqafis\\\/3\\\/edit\\\">at this JSBin<\\\/a>.<\\\/p>\\n\\n<p>Note that if all you wanted to do was display a notification, and didn't care about animations, you could just have done:<\\\/p>\\n\\n<pre><code>{{#if notification}}\\n  &lt;div id=\\\"notification\\\"&gt;\\n    &lt;button {{action \\\"closeNotification\\\"}}&gt;Close&lt;\\\/button&gt;\\n    &lt;p id=\\\"notification\\\"&gt;{{notification}}&lt;\\\/p&gt;\\n  &lt;\\\/div&gt;\\n{{\\\/if}}\\n<\\\/code><\\\/pre>\\n\\n<p>in your <code>application<\\\/code> template, with the same <code>ApplicationController<\\\/code>, and everything would just work.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"3","accepted":"yes"},"14306796":{"id":"14306796","date":"2013-01","score":"19","body":"\"<p>You should be able to do this:<\\\/p>\\n\\n<pre><code>App.DoctorsRoute = Ember.Route.extend({\\n  model: function() {\\n    return App.Doctor.find();\\n  },\\n\\n  redirect: function() {\\n    var doctor = this.modelFor('doctors').get('firstObject');\\n    this.transitionToRoute('doctor', doctor);\\n  }\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>This will work because:<\\\/p>\\n\\n<ul>\\n<li>If the model hook returns an object that hasn't loaded yet, the rest of the hooks won't run until the model is fully loaded.<\\\/li>\\n<li>If the <code>redirect<\\\/code> hook transitions to another route, the rest of the hooks won't run.<\\\/li>\\n<\\\/ul>\\n\\n<p>Note that as of <a href=\\\"https:\\\/\\\/github.com\\\/emberjs\\\/ember.js\\\/commit\\\/2426cb93ef9844d96219f399577e32fd7b667597\\\" rel=\\\"nofollow\\\">2426cb9<\\\/a>, you can leave off the implicit <code>.index<\\\/code> when transitioning.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<javascript><ember.js><ember-router>","commentcount":"10","accepted":"yes"},"14313448":{"id":"14313448","date":"2013-01","score":"8","body":"\"<p>With the new router, you still have access to serialization and deserialization.<\\\/p>\\n\\n<ul>\\n<li><code>deserialize<\\\/code> has been renamed <code>model<\\\/code>, and it gets the params as a parameter. If you return an Ember Data object from <code>model<\\\/code> (or any other <a href=\\\"https:\\\/\\\/github.com\\\/promises-aplus\\\/promises-spec\\\">Promises\\\/A+ compatible promise<\\\/a>), the rest of the hooks will not run until the object has loaded.<\\\/li>\\n<li><code>serialize<\\\/code> is still named <code>serialize<\\\/code>. It takes the model (the object passed to the <code>linkTo<\\\/code> helper or the <code>transitionTo<\\\/code> method) as its first argument, and should return a hash of parameters.<\\\/li>\\n<\\\/ul>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><ember-router>","commentcount":"1","accepted":"yes"},"14314788":{"id":"14314788","date":"2013-01","score":"7","body":"\"<p>At the moment, the only workable approach is to use a computed property (as you described in your comment).<\\\/p>\\n\\n<p>One thing that might make this more tolerable, if you find yourself doing this often, is to create a computed property \\\"macro\\\":<\\\/p>\\n\\n<pre><code>App.computed.mailto = function(property) {\\n  return function() {\\n    return \\\"mailto:\\\" + this.get(property);\\n  }.property(property);\\n};\\n<\\\/code><\\\/pre>\\n\\n<p>Then you could do this in your controller:<\\\/p>\\n\\n<pre><code>var mailto = App.computed.mailto;\\n\\nApp.UserController = Ember.ObjectController.extend({\\n  mailtoContactEmail: mailto('contactEmail')\\n});\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><handlebars.js>","commentcount":"6","accepted":"yes"},"14314896":{"id":"14314896","date":"2013-01","score":"3","body":"\"<p>There are two things happening here:<\\\/p>\\n\\n<ol>\\n<li>The <code>isHome<\\\/code> property is not getting applied to your <code>li<\\\/code><\\\/li>\\n<li>The <code>{{linkTo}}<\\\/code> helper, coincidentally, adds an <code>active<\\\/code> class to links when the route it points to is active.<\\\/li>\\n<\\\/ol>\\n\\n<p>This is making you think that the <code>active<\\\/code> class is getting moved. You can try logging the <code>isHome<\\\/code> property (via <code>{{log isHome}}<\\\/code>) to see whether it is true as you expect.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<attributes><ember.js><bind><handlebars.js>","commentcount":"1","accepted":""},"14324532":{"id":"14324532","date":"2013-01","score":"40","body":"\"<p>On master, the correct API is:<\\\/p>\\n\\n<pre><code>App.Adapter.map('App.Post', {\\n  comments: { embedded: 'always' }\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>The two possible values of <code>embedded<\\\/code> are:<\\\/p>\\n\\n<ul>\\n<li><code>load<\\\/code>: The child records are embedded when loading, but should be saved as standalone records. In order for this to work, the child records must have an ID.<\\\/li>\\n<li><code>always<\\\/code>: The child records are embedded when loading, and are saved embedded in the same record. This, of course, affects the dirtiness of the records (if the child record changes, the adapter will mark the parent record as dirty).<\\\/li>\\n<\\\/ul>\\n\\n<p>If you don't have a custom adapter, you can call <code>map<\\\/code> directly on <code>DS.RESTAdapter<\\\/code>:<\\\/p>\\n\\n<pre><code>DS.RESTAdapter.map('App.Post', {\\n  comments: { embedded: 'always' }\\n});\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<javascript><ember.js><ember-data>","commentcount":"6","accepted":""},"14324577":{"id":"14324577","date":"2013-01","score":"5","body":"\"<p>The current router does not support query-string parameters.<\\\/p>\\n\\n<p>We are tracking this bug at <a href=\\\"https:\\\/\\\/github.com\\\/emberjs\\\/ember.js\\\/issues\\\/1773\\\">https:\\\/\\\/github.com\\\/emberjs\\\/ember.js\\\/issues\\\/1773<\\\/a>. You may want to follow it.<\\\/p>\\n\\n<p>In the meantime, your best bet is probably to use a dynamic segment and manually serialize (with the <code>serialize<\\\/code> hook) and deserialize (with the <code>model<\\\/code> hook).<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"4","accepted":"yes"},"14328609":{"id":"14328609","date":"2013-01","score":"2","body":"\"<p>Rails 2.3 doesn't have built-in bundler support because it came out before Bundler.<\\\/p>\\n\\n<p>The <a href=\\\"http:\\\/\\\/gembundler.com\\\/v1.2\\\/rails23.html\\\" rel=\\\"nofollow\\\">Bundler website<\\\/a> provides instructions for adding Bundler to Rails 2.3.<\\\/p>\\n\\n<p>In short:<\\\/p>\\n\\n<ul>\\n<li>Add a <code>config\\\/preinitializer.rb<\\\/code> to set up the bundled environment before Rails is loaded<\\\/li>\\n<li>Update your <code>config\\\/boot.rb<\\\/code> to require the bundled gems<\\\/li>\\n<li>Move any <code>config.gem<\\\/code> declarations to the <code>Gemfile<\\\/code><\\\/li>\\n<li>Proceed as usual<\\\/li>\\n<\\\/ul>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby-on-rails><ruby><gem><ruby-on-rails-2><gemfile>","commentcount":"0","accepted":""},"14328909":{"id":"14328909","date":"2013-01","score":"22","body":"\"<p>We definitely need a more public, permanent solution, but something like this should work for now.<\\\/p>\\n\\n<p>The template:<\\\/p>\\n\\n<pre><code>&lt;ul&gt;\\n{{#view App.NavView}}\\n  {{#linkTo \\\"about\\\"}}About{{\\\/linkTo}}\\n{{\\\/view}}\\n\\n{{#view App.NavView}}\\n  {{#linkTo \\\"contacts\\\"}}Contacts{{\\\/linkTo}}\\n{{\\\/view}}\\n&lt;\\\/ul&gt;\\n<\\\/code><\\\/pre>\\n\\n<p>The view definition:<\\\/p>\\n\\n<pre><code>App.NavView = Ember.View.extend({\\n  tagName: 'li',\\n  classNameBindings: ['active'],\\n\\n  active: function() {\\n    return this.get('childViews.firstObject.active');\\n  }.property()\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>This relies on a couple of constraints:<\\\/p>\\n\\n<ul>\\n<li>The nav view contains a single, static child view <\\\/li>\\n<li>You are able to use a view for your <code>&lt;li&gt;<\\\/code>s. There's a lot of detail <a href=\\\"http:\\\/\\\/emberjs.com\\\/guides\\\/views\\\/customizing-a-views-element\\\/\\\">in the docs<\\\/a> about how to customize a view's element from its JavaScript definition or from Handlebars.<\\\/li>\\n<\\\/ul>\\n\\n<p>I have supplied <a href=\\\"http:\\\/\\\/jsbin.com\\\/olovun\\\/2\\\/edit\\\">a live JSBin<\\\/a> of this working.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"8","accepted":""},"14328998":{"id":"14328998","date":"2013-01","score":"8","body":"\"<p>Your problem is that you're calling <code>transitionTo<\\\/code> without supplying a model.<\\\/p>\\n\\n<p>Ember is trying to transition to the <code>article<\\\/code> route. In order to do that, it needs to generate value of <code>:url<\\\/code> dynamic segment. In order to get that, it passes the model that you pass as the second parameter to <code>transitionTo<\\\/code> to the route's <code>serialize<\\\/code> method.<\\\/p>\\n\\n<p>The default <code>serialize<\\\/code> method tries to fill in the dynamic segment with the <code>id<\\\/code> property of the model.<\\\/p>\\n\\n<p>Your action is:<\\\/p>\\n\\n<pre><code>{{action goToArticle}}\\n<\\\/code><\\\/pre>\\n\\n<p>It should be:<\\\/p>\\n\\n<pre><code>{{action \\\"goToArticle\\\" article}}\\n<\\\/code><\\\/pre>\\n\\n<p>Then, you need to update your <code>IndexController<\\\/code> to take the parameter:<\\\/p>\\n\\n<pre><code>Ngin.IndexController = Ember.ObjectController.extend({\\n  content: [],\\n    goToArticle: function(article) {\\n      this.transitionTo(\\\"article\\\", article);\\n    }\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>All of that said, you really should be using a link here, not an action. That would handle everything for you:<\\\/p>\\n\\n<pre><code>{{#linkTo \\\"article\\\" article}}{{article.title}}{{\\\/linkTo}}\\n<\\\/code><\\\/pre>\\n\\n<p>You can learn about <a href=\\\"http:\\\/\\\/emberjs.com\\\/guides\\\/templates\\\/links\\\/\\\">the link helper<\\\/a> and <a href=\\\"http:\\\/\\\/emberjs.com\\\/guides\\\/templates\\\/actions\\\/\\\">the action helper<\\\/a> in the Ember guides.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><ember-router>","commentcount":"2","accepted":"yes"},"14329403":{"id":"14329403","date":"2013-01","score":"19","body":"\"<p>You should never have more than one store in an Ember application.<\\\/p>\\n\\n<p>Instead, you can register adapters for specific types:<\\\/p>\\n\\n<pre><code>App.Store.registerAdapter('App.Post', DS.RESTAdapter.extend({\\n  \\\/\\\/ implement adapter; in this case\\n  url: \\\"\\\/gl\\\"\\n}));\\n<\\\/code><\\\/pre>\\n\\n<p>You will probably want to use the <code>RESTAdapter<\\\/code> as a starting point, unless you have specific needs and are willing to get down and dirty with the (still evolving) adapter API.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"4","accepted":"yes"},"14329593":{"id":"14329593","date":"2013-01","score":"0","body":"\"<p>This works fine for me. See <a href=\\\"http:\\\/\\\/jsbin.com\\\/uwufir\\\/1\\\/edit\\\" rel=\\\"nofollow\\\">this JSBin<\\\/a>.<\\\/p>\\n\\n<p>One note:<\\\/p>\\n\\n<blockquote>\\n  <p>You don't need to wrap the application in a jQuery <code>ready<\\\/code> callback. Ember will automatically defer initialization until DOM ready on its own.<\\\/p>\\n<\\\/blockquote>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"5","accepted":"yes"},"14332355":{"id":"14332355","date":"2013-01","score":"2","body":"\"<p>The <code>marshal_load<\\\/code> method exists to provide support for <code>Marshal.load<\\\/code>.<\\\/p>\\n\\n<pre><code>event = OpenStruct.new({ 'time' =&gt; Time.now, 'title' =&gt; 'Birthday Party' })\\nbinary = Marshal.dump(event)\\nloaded = Marshal.load(binary) # the OpenStruct\\n<\\\/code><\\\/pre>\\n\\n<p>The easiest way to programmatically load a hash into a struct is using send:<\\\/p>\\n\\n<pre><code>event = OpenStruct.new\\nhash.each do |key, value|\\n  event.send(\\\"#{key}=\\\", value)\\nend\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ruby><openstruct>","commentcount":"1","accepted":"yes"},"14344336":{"id":"14344336","date":"2013-01","score":"2","body":"\"<p>You can do:<\\\/p>\\n\\n<pre><code>firstElementBinding: 'myArrayController.firstObject'\\n<\\\/code><\\\/pre>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"2","accepted":"yes"},"14349542":{"id":"14349542","date":"2013-01","score":"8","body":"\"<p>Today, you can get access to controllers from your routes (and route actions) via:<\\\/p>\\n\\n<pre><code>this.controllerFor('posts')\\n<\\\/code><\\\/pre>\\n\\n<p>In your controllers, you declare dependencies on other controllers:<\\\/p>\\n\\n<pre><code>App.Post = Ember.ObjectController.extend({\\n  needs: ['posts']\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>And then, inside your controller, you can also use <code>this.controllerFor<\\\/code>.<\\\/p>\\n\\n<p>FYI, We plan to make this.get('controllers.posts') work inside of controllers that use <code>needs<\\\/code>, which would make using dependent controllers inside of your templates straight forward.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"0","accepted":"yes"},"14363069":{"id":"14363069","date":"2013-01","score":"3","body":"\"<p>There appears to be a bug with bindings to properties that rely on state set up in <code>init<\\\/code>. I have filed a bug <a href=\\\"https:\\\/\\\/github.com\\\/emberjs\\\/ember.js\\\/issues\\\/1789\\\" rel=\\\"nofollow\\\">on the Ember issue tracker<\\\/a>.<\\\/p>\\n\\n<p>For a less ugly solution, you can use <code>Ember.computed.alias<\\\/code>:<\\\/p>\\n\\n<pre><code>App.Post = DS.Model.extend({\\n  text: DS.attr('string'),\\n  user: DS.belongsTo('App.User'),\\n\\n  userName: Ember.computed.alias('user.name')\\n});\\n<\\\/code><\\\/pre>\\n\\n<p>I have a working example in <a href=\\\"http:\\\/\\\/jsbin.com\\\/edusir\\\/1\\\/edit\\\" rel=\\\"nofollow\\\">this JSBin<\\\/a>.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<binding><ember.js><ember-data>","commentcount":"1","accepted":"yes"},"14366619":{"id":"14366619","date":"2013-01","score":"2","body":"\"<p>Just create your application and let Ember initialize it.<\\\/p>\\n\\n<p>All you need to do is:<\\\/p>\\n\\n<pre><code>App = Ember.Application.create()\\n<\\\/code><\\\/pre>\\n\\n<p>The App will <strong>not<\\\/strong> be initialized immediately. It waits, at least, for DOM readiness and for the rest of your classes to be defined (by waiting until control is returned to the browser from the currently executed JavaScript).<\\\/p>\\n\\n<p>If you want to defer it for other reasons, do something like this:<\\\/p>\\n\\n<pre><code>App.deferReadiness();\\n$.getJSON(\\\"\\\/boot\\\", function() { App.advanceReadiness(); });\\n<\\\/code><\\\/pre>\\n\\n<p>This will wait to boot the app until the <code>\\\/boot<\\\/code> Ajax call returns.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<javascript><model-view-controller><ember.js>","commentcount":"1","accepted":""},"14370041":{"id":"14370041","date":"2013-01","score":"0","body":"\"<p>You shouldn't have to worry about memory leaks here.<\\\/p>\\n\\n<p>You are assigning the controller to a view inserted into a <code>currentView<\\\/code>, and not otherwise holding a reference to it. When the view is torn down (when the container view's <code>currentView<\\\/code> gets set to <code>null<\\\/code> or something else), Ember will <code>destroy<\\\/code> it. This will release any remaining references to it, which will let the GC collect it, and the referenced controller along with it.<\\\/p>\\n\\n<p>If this is not true for some reason, it is probably an Ember bug.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"0","accepted":"yes"},"14394082":{"id":"14394082","date":"2013-01","score":"18","body":"\"<p>You made a number of small errors. I have put a working version on <a href=\\\"http:\\\/\\\/jsbin.com\\\/izacuj\\\/1\\\/edit\\\">JSBin<\\\/a>.<\\\/p>\\n\\n<p>Stylistic issues that did not cause any failures:<\\\/p>\\n\\n<ul>\\n<li>You don't need to declare any <code>index<\\\/code> routes.<\\\/li>\\n<li>You don't need an empty <code>ready<\\\/code> method on <code>Application<\\\/code>. In general, put startup logic in <code>ApplicationRoute#setupController<\\\/code>, where you will also have access to controllers.<\\\/li>\\n<li>You should name your template the same name as the route unless you are trying to share a single template across multiple routes. In this case, you should have just used <code>index<\\\/code> rather than <code>myTemplate<\\\/code>.<\\\/li>\\n<\\\/ul>\\n\\n<p>Issues related to the failures:<\\\/p>\\n\\n<ul>\\n<li>Controller names should be capitalized: <code>App.IndexController<\\\/code> not <code>App.indexController<\\\/code><\\\/li>\\n<li>You shouldn't specify a target if the target is the current controller.<\\\/li>\\n<li>Your <code>render<\\\/code> call specifies <code>{ controller: 'indexController' }<\\\/code>. It should be <code>{ controller: 'index' }<\\\/code>.<\\\/li>\\n<\\\/ul>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js>","commentcount":"1","accepted":"yes"},"14394484":{"id":"14394484","date":"2013-01","score":"5","body":"\"<p>If you want to render a template and its associated controller and view, you can use the <code>{{render}}<\\\/code> template. It works similarly to <code>this.render<\\\/code> in the router.<\\\/p>\\n\\n<pre><code>{{render \\\"song\\\" song}}\\n<\\\/code><\\\/pre>\\n\\n<p>This example will render the <code>song<\\\/code> template with an instance of <code>App.SongController<\\\/code> and <code>App.SongView<\\\/code>. It will set the <code>song<\\\/code> controller's <code>model<\\\/code> to the value of <code>song<\\\/code> in the current context.<\\\/p>\\n\\n<p>Here is a <a href=\\\"http:\\\/\\\/jsbin.com\\\/eqihif\\\/1\\\/edit\\\">working JSBin<\\\/a> that illustrates how this works.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><handlebars.js>","commentcount":"3","accepted":"yes"},"14403028":{"id":"14403028","date":"2013-01","score":"8","body":"\"<p>There are a few different issues here:<\\\/p>\\n\\n<p>You should not use <code>App.store<\\\/code>. The store should be available on routes as <code>this.get('store')<\\\/code>.<\\\/p>\\n\\n<p>I'm not sure why you're naming your route <code>GroupsRoute<\\\/code>. Since it represents an event, you should name it <code>EventRoute<\\\/code>. This is not required, but it would be more idiomatic. Also, you don't need to specify the model for <code>GroupsRoute<\\\/code>. What you are doing is the default behavior.<\\\/p>\\n\\n<p>Finally, you can get the model for another route via: <code>this.modelFor('groups')<\\\/code> in your route. That should solve your issue here.<\\\/p>\\n\"","title":"\"\"","favorite":null,"tags":"<ember.js><ember-router>","commentcount":"3","accepted":"yes"}},"comments":{"5668633":{"date":"2011-02","id":"5668633","postid":"5061564","body":"\"which MySQL driver (and which version) are you using? what encoding does MySQL have for the column in question?\"","score":"0","tags":"<ruby-on-rails-3><activerecord><encoding><uuid>"},"10357487":{"date":"2011-12","id":"10357487","postid":"8390103","body":"\"longer answer forthcoming, but just a quick correction: The SproutCore 2.0 repo (https:\\\/\\\/github.com\\\/sproutcore\\\/sproutcore20\\\/commits\\\/master) is updated quite frequently. A number of companies are now collaborating on it and we should have an announcement about where we go from here in the near future.\"","score":"0","tags":"<sproutcore>"},"10600158":{"date":"2011-12","id":"10600158","postid":"8552975","body":"\"It seems that the canonical solution (using isVisible) is unreliable due to observer ordering. We will be either fixing this or providing an explicit lifecycle callback in the next few days.\"","score":"0","tags":"<ember.js>"},"10744153":{"date":"2011-12","id":"10744153","postid":"8646698","body":"\"If you want to handle events, we generally feel that you should create a new view to encapsulate those events.\\n\\nWe are working on a solution for simple target\\\/action cases, but the case of focus\\\/blur is sufficiently complex that you should probably just make a custom view.\"","score":"2","tags":""},"11082104":{"date":"2012-01","id":"11082104","postid":"8759691","body":"\"what exactly is failing? can you create a JSFiddle with what you're seeing?\"","score":"0","tags":"<ember.js>"},"10451431":{"date":"2011-12","id":"10451431","postid":"8238836","body":"\"You don't normally have to call this._super() inside lifecycle callbacks.\"","score":"2","tags":""},"10561560":{"date":"2011-12","id":"10561560","postid":"8527406","body":"\"The second one is more correct. You don't need a nested view, so don't bother making one. You can attach a template to a view by using templateName.\"","score":"2","tags":""},"14060240":{"date":"2012-05","id":"14060240","postid":"10791549","body":"\"@EbenGeer actually, it was removed from Rails proper for Rails 4.0. The main issue is that unlike SQL databases, a Rails backend is extremely inconsistent (I provide some examples in my talk), so the nice conventional solution in ActiveRecord doesn't work well for ActiveResource.\\n\\nI am not opposed to the concept of ARes in general, but we need better conventions around a Rails backend to make it really work.\"","score":"8","tags":"<ruby-on-rails><rest><activeresource>"},"11203933":{"date":"2012-01","id":"11203933","postid":"8947984","body":"\"It's also worth noting that Ember.js is copiously documented, and the unminified ember.js that we ship includes that documentation.\\n\\nI ran cloc (lines of code counter) against the compiled source and get 3,214 blank lines, 4,800 lines of comments, and 7,328 lines of code. Also note that the compiled source include Handlebars.js, which clocs to 1,314 lines of code (it includes the compiled output of the Jison parser generator). This makes Ember.js about 6,000 lines of actual code.\\n\\nThis is obviously not as small as Backbone, but Ember does a lot more than Backbone...\"","score":"19","tags":""},"15602765":{"date":"2012-08","id":"15602765","postid":"11702110","body":"\"I don't know a lot about ASP.net MVC. Can you try to reproduce the issue using jsfiddle?\"","score":"0","tags":"<ajax><json><asp.net-mvc-4><asp.net-web-api><handlebars.js>"},"16559999":{"date":"2012-09","id":"16559999","postid":"1071510","body":"\"@TomaszKalkosi?ski it does.\"","score":"0","tags":""},"19982678":{"date":"2013-01","id":"19982678","postid":"14368523","body":"\"Do not, under any circumstances, create a function inside a loop.\"","score":"0","tags":"<javascript><jquery><closures>"},"19982935":{"date":"2013-01","id":"19982935","postid":"11816910","body":"\"possible duplicate of [Installing and Running CGI Proxy Python on Tomcat 7](http:\\\/\\\/stackoverflow.com\\\/questions\\\/11819310\\\/installing-and-running-cgi-proxy-python-on-tomcat-7)\"","score":"0","tags":"<python><module><environment>"},"19864968":{"date":"2013-01","id":"19864968","postid":"14299970","body":"\"@ken it still **exists** but is not public. If you use it, please make sure you call super.\"","score":"1","tags":""},"19865006":{"date":"2013-01","id":"19865006","postid":"14288519","body":"\"Can you file an issue with the Ember issue tracker?\"","score":"0","tags":"<ember.js>"},"19865478":{"date":"2013-01","id":"19865478","postid":"14300850","body":"\"I assume you're calling `this._super` after munging the data?\"","score":"0","tags":""},"19865604":{"date":"2013-01","id":"19865604","postid":"14296339","body":"\"@Alexander Wow! Great work! I couldn't have done a better job explaining this and I'm in that code all the time.\"","score":"18","tags":""},"19865687":{"date":"2013-01","id":"19865687","postid":"14221579","body":"\"possible duplicate of [Can I comment a JSON file?](http:\\\/\\\/stackoverflow.com\\\/questions\\\/244777\\\/can-i-comment-a-json-file)\"","score":"0","tags":"<comments><npm>"},"19865689":{"date":"2013-01","id":"19865689","postid":"14296776","body":"\"possible duplicate of [Is there any way to use window.onbeforeunload on Mobile Safari for iOS devices?](http:\\\/\\\/stackoverflow.com\\\/questions\\\/4127621\\\/is-there-any-way-to-use-window-onbeforeunload-on-mobile-safari-for-ios-devices)\"","score":"0","tags":"<javascript><mobile-safari><onbeforeunload>"},"19881143":{"date":"2013-01","id":"19881143","postid":"14273175","body":"\"Honestly, I was surprised that the attributes \\\"bubbled\\\" before. They should not. If you want to share the same context, use `template`, not `render`.\"","score":"0","tags":""},"19898209":{"date":"2013-01","id":"19898209","postid":"14314788","body":"\"You can't put handlebars helpers inside of the values in bindAttr, so that won't work.\"","score":"0","tags":""},"19913054":{"date":"2013-01","id":"19913054","postid":"14324577","body":"\"You can put static and dynamic routes at the same level. If both a static and dynamic route matches, the static route wins. This is so that `\\\/posts\\\/new` wins over `\\\/posts\\\/:post_id`.\"","score":"0","tags":""},"19913217":{"date":"2013-01","id":"19913217","postid":"14328434","body":"\"What do I have to do to trigger the error?\"","score":"0","tags":"<ember.js><ember-router>"},"19914017":{"date":"2013-01","id":"19914017","postid":"14327021","body":"\"Can I see your ApplicationController?\"","score":"0","tags":"<ember.js>"},"19914250":{"date":"2013-01","id":"19914250","postid":"14328943","body":"\"possible duplicate of [JSON Serializer Android](http:\\\/\\\/stackoverflow.com\\\/questions\\\/14328464\\\/json-serializer-android)\"","score":"0","tags":"<android>"},"19863075":{"date":"2013-01","id":"19863075","postid":"14273004","body":"\"@hank42 exactly right\"","score":"0","tags":""},"19975933":{"date":"2013-01","id":"19975933","postid":"14362691","body":"\"possible duplicate of [Unable to use keyboard in Android emulator](http:\\\/\\\/stackoverflow.com\\\/questions\\\/11316818\\\/unable-to-use-keyboard-in-android-emulator)\"","score":"0","tags":"<android><android-emulator>"},"19976101":{"date":"2013-01","id":"19976101","postid":"10871261","body":"\"possible duplicate of [java.lang.RuntimeException: eglSwapBuffers failed: EGL\\\\_SUCCESS](http:\\\/\\\/stackoverflow.com\\\/questions\\\/10459357\\\/java-lang-runtimeexception-eglswapbuffers-failed-egl-success)\"","score":"0","tags":"<android><opengl-es><libgdx>"},"19844306":{"date":"2013-01","id":"19844306","postid":"14273175","body":"\"Can you make a JSBin that demonstrates the issue.\"","score":"0","tags":""},"19844321":{"date":"2013-01","id":"19844321","postid":"14273397","body":"\"You override `model` to specify which model your route represents (it becomes the `model` property of your controller). You override `setupController` to set up other properties on your controller that you want your template to have access to.\"","score":"1","tags":""},"19944248":{"date":"2013-01","id":"19944248","postid":"14344336","body":"\"Indeed! You can use it in Handlebars :D\"","score":"0","tags":""},"19977218":{"date":"2013-01","id":"19977218","postid":"14365493","body":"\"@cimmanon I don't think it's a duplicate\"","score":"2","tags":"<css><css3><css-selectors><scss>"},"20024978":{"date":"2013-01","id":"20024978","postid":"14375239","body":"\"possible duplicate of [Exception with Android when using ACRA](http:\\\/\\\/stackoverflow.com\\\/questions\\\/14378002\\\/exception-with-android-when-using-acra)\"","score":"1","tags":"<android><android-activity><acra>"},"19485461":{"date":"2012-12","id":"19485461","postid":"8845248","body":"\"@nembleton See my answer. Bound helpers are now an Ember feature.\"","score":"3","tags":""},"19888334":{"date":"2013-01","id":"19888334","postid":"14314635","body":"\"Please use the edit link on your question to add additional information.  The Post Answer button should be used only for complete answers to the question.\"","score":"2","tags":""},"19888478":{"date":"2013-01","id":"19888478","postid":"14309163","body":"\"This is an open issue in the Ember router (see https:\\\/\\\/github.com\\\/emberjs\\\/ember.js\\\/issues\\\/1606)\"","score":"2","tags":"<ember.js><ember-data>"},"19815623":{"date":"2013-01","id":"19815623","postid":"11628489","body":"\"FYI: In the new router, `{{linkTo}}` provides this behavior automatically -- http:\\\/\\\/emberjs.com\\\/guides\\\/routing\\\/defining-your-routes\\\/\"","score":"3","tags":"<ember.js><ember-old-router>"},"19846698":{"date":"2013-01","id":"19846698","postid":"14290719","body":"\"Can you supply the stack trace that you get with \\\"Uncaught TypeError: Cannot call method 'hasOwnProperty' of null\\\". It should work but that error does not provide enough information.\\n\\nAlso, are you using the debug build of Ember? It provides much more informative errors than the minified build.\"","score":"0","tags":"<ember.js><ember-data>"},"19860669":{"date":"2013-01","id":"19860669","postid":"14273175","body":"\"The controller bubbling issue is fixed in https:\\\/\\\/github.com\\\/emberjs\\\/ember.js\\\/commit\\\/ee86cdd68f801444efb11bbe3e06c0ed0e917c2f\"","score":"0","tags":""},"19860713":{"date":"2013-01","id":"19860713","postid":"14290719","body":"\"Sean Keating: That is a known issue that I forgot about. It should be fixed ASAP.\"","score":"0","tags":"<ember.js><ember-data>"},"19860955":{"date":"2013-01","id":"19860955","postid":"14290719","body":"\"Sean Keating: Actually, thanks to sly7_7, that was fixed in https:\\\/\\\/github.com\\\/emberjs\\\/data\\\/commit\\\/bc755f9227d9a71f33e4dc8b675409de66fe8fd2\"","score":"0","tags":"<ember.js><ember-data>"},"19860973":{"date":"2013-01","id":"19860973","postid":"14290847","body":"\"The main workaround is to provide the relationships in the JSON from both the parent and child side. That is easy enough in fixtures, but maybe not from your server.\"","score":"0","tags":""},"19918572":{"date":"2013-01","id":"19918572","postid":"14330324","body":"\"possible duplicate of [Best way to add \\\"current\\\" class to nav in Rails 3](http:\\\/\\\/stackoverflow.com\\\/questions\\\/3705898\\\/best-way-to-add-current-class-to-nav-in-rails-3)\"","score":"0","tags":"<ruby-on-rails>"},"19919659":{"date":"2013-01","id":"19919659","postid":"11629977","body":"\"can you update your answer to reflect changes in the new router? Check out http:\\\/\\\/stackoverflow.com\\\/questions\\\/14328295\\\/how-do-i-bind-to-the-active-class-of-a-link-using-the-new-ember-router.\"","score":"2","tags":""},"19935084":{"date":"2013-01","id":"19935084","postid":"14324532","body":"\"Yes. It is the same API for embedded belongsTo.\"","score":"0","tags":""},"19935168":{"date":"2013-01","id":"19935168","postid":"14329593","body":"\"Looks like you were using Ember 1.0-pre2. You wanted to be using Ember from master (which will become pre3), which I used in my JSBin.\"","score":"0","tags":""},"19935181":{"date":"2013-01","id":"19935181","postid":"11629977","body":"\"Thanks so much @pangratz. You're a rock star.\"","score":"2","tags":""},"19935256":{"date":"2013-01","id":"19935256","postid":"14329403","body":"\"The alternative would have been to use url: \\\"\\\/gi\\\" in your specific adapter. I will update my answer to be clearer about that.\"","score":"0","tags":""},"19914703":{"date":"2013-01","id":"19914703","postid":"14327021","body":"\"Please add to your question if you can find a difference between your example and my JSBin, other than wrapping your app in a jQuery ready callback.\"","score":"0","tags":"<ember.js>"},"19915144":{"date":"2013-01","id":"19915144","postid":"14314788","body":"\"@AnkurAgarwal Handlebars helpers that emit bound attributes are not currently supported. What you are trying to do isn't going to work.\"","score":"0","tags":""},"20044356":{"date":"2013-01","id":"20044356","postid":"14400772","body":"\"I accepted @sandstrom's pull request. Enjoy!\"","score":"0","tags":""},"19939443":{"date":"2013-01","id":"19939443","postid":"14329593","body":"\"Nah... We **really** need to ship -pre3.\"","score":"1","tags":""},"20017188":{"date":"2013-01","id":"20017188","postid":"14388514","body":"\"possible duplicate of [Regex that matches valid Ruby local variable names](http:\\\/\\\/stackoverflow.com\\\/questions\\\/3648551\\\/regex-that-matches-valid-ruby-local-variable-names)\"","score":"0","tags":"<regex><variables><identifier>"},"20090813":{"date":"2013-01","id":"20090813","postid":"14403028","body":"\"Other than that, does my answer solve your issue?\"","score":"0","tags":""},"27626000":{"date":"2013-09","id":"27626000","postid":"16071544","body":"\"The `:` should not be necessary, but a parameter name is (so you can get if from your route if you want). `*path` is what I use.\"","score":"2","tags":""},"27463727":{"date":"2013-09","id":"27463727","postid":"14089151","body":"\"If you need a block helper, chances are you should be using a component.\"","score":"1","tags":""}}}